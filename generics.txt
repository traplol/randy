
parsing the `struct Array[T] in`...
0) push type scope
1) get or create the type named 'Array'
 - if Array is not undefined: error
 - if Array has params then assert that first param is NULL and free any old params, 
2) get or create the type named 'T'
 - if T is not undefined: error: means duplicate type name in params
3) give Array one parameter with type named 'T'
3) set Array type kind to 'struct'
4) parse body of struct
5) pop type scope
6) add this type named 'Array' to current type scope.


parsing the instance
`var arr: Array[int]& = ...`
0) get or create the type named 'Array'
 - if Array is undefined: get or create 'Array[int]' and add to type table to be instantiated later
 - else Array is defined: get or create 'Array[int]'

instantiating types
0) deep copy the AST of the generic type
1) walk the AST of the generic type and replace every instance of a parameter type with the instance type

