#include core
#include memory

const TALIST_head = 0;
const TALIST_comparer = 8;
const sizeof_TALIST = 16;

const TALIST_NODE_next = 0;
const TALIST_NODE_key = 8;
const TALIST_NODE_val = 16;
const sizeof_TALIST_NODE = 24;

proc _alist_default_comparer a, b in
    return a == b;
end

proc make_alist comparer in
    var alist = malloc(sizeof_TALIST);
    u64!(alist + TALIST_head, NULL);
    if comparer then
        u64!(alist + TALIST_comparer, comparer);
    else
        u64!(alist + TALIST_comparer, _alist_default_comparer);
    end
    return alist;
end

proc alist_head alist in
    return u64@(alist + TALIST_head);
end

proc alist_comparer alist in
    return u64@(alist + TALIST_comparer);
end

proc make_alist_node next, key, val in
    var node = malloc(sizeof_TALIST_NODE);
    u64!(node + TALIST_NODE_next, next);
    u64!(node + TALIST_NODE_key, key);
    u64!(node + TALIST_NODE_val, val);
    return node;
end

proc free_alist_node node in
    free(node);
end

proc alist_node_next node in
    return u64@(node + TALIST_NODE_next);
end

proc alist_node_key node in
    return u64@(node + TALIST_NODE_key);
end

proc alist_node_val node in
    return u64@(node + TALIST_NODE_val);
end

proc alist_node_set_val node, val in
    u64!(node + TALIST_NODE_val, val);
end

proc free_alist alist in
    var cur = alist_head(alist);
    var next;
    while cur do
        next = alist_node_next(cur); 
        free_alist_node(cur);
        cur = next;
    done
    free(alist);
end

proc alist_push alist, key, val in
    var new_node = make_alist_node(alist_head(alist), key, val);
    u64!(alist + TALIST_head, new_node);
end

proc alist_find alist, key in
    var cur = alist_head(alist);
    var compare = alist_comparer(alist);
    var other_key;
    while cur do
        other_key = alist_node_key(cur);
        if compare(key, other_key) then
            return cur;
        end
        cur = alist_node_next(cur); 
    done
    return NULL;
end
