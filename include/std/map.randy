#include memory

const TMAP_length   =  0; // int
const TMAP_capacity =  8; // int
const TMAP_buffer   = 16; // ptr
const TMAP_comparer = 24; // compare_fn
const TMAP_hasher   = 32; // hash_fn
const TMAP_cache    = 40; // the last accessed via map_find/map_set map_pair, invalidated on expansion
const sizeof_TMAP   = 48;

const TMAP_PAIR_key = 0;
const TMAP_PAIR_val = 8;
const sizeof_TMAP_PAIR = 16;

const MAP_Load_Factor = 2; // resize & rehash when size >= capacity/2
const MAP_Default_Cap = 16;

proc _default_map_compare a: ptr, b: ptr -> bool in
    return a == b;
end

proc _default_map_hash e: ptr -> ptr in
    return e;
end

proc make_map capacity: int, comparer: ptr, hasher: ptr -> map in
    var self = malloc(sizeof_TMAP);
    if capacity <= 0 then
        capacity = MAP_Default_Cap;
    end
    u64!(self + TMAP_length, 0);
    u64!(self + TMAP_capacity, capacity);
    u64!(self + TMAP_buffer, calloc(capacity, sizeof_TMAP_PAIR));
    if not comparer then
        comparer = _default_map_compare;
    end
    if not hasher then
        hasher = _default_map_hash;
    end
    u64!(self + TMAP_comparer, comparer);
    u64!(self + TMAP_hasher, hasher);
    u64!(self + TMAP_cache, NULL);
    return cast(self, map);
end

proc map_len self: map in return cast(u64@(self + TMAP_length), int); end
proc map_cap self: map in return cast(u64@(self + TMAP_capacity), int); end
proc map_buffer self: map in return cast(u64@(self + TMAP_buffer), ptr); end
proc map_comparer self: map in return cast(u64@(self + TMAP_comparer), ptr); end
proc map_hasher self: map in return cast(u64@(self + TMAP_hasher), ptr); end

proc free_map self: map in
    if self then
        free(map_buffer(self));
        free(self);
    end
end

proc map_pair_key self: map_pair in return cast(u64@(self + TMAP_PAIR_key), ptr); end
proc map_pair_val self: map_pair in return cast(u64@(self + TMAP_PAIR_val), ptr); end

proc _map_expand self: map_pair in
    u64!(self + TMAP_cache, NULL);
    var old_cap = map_cap(self);
    var old_buf = map_buffer(self);
    var new_cap = old_cap * 2;
    u64!(self + TMAP_length, 0);
    u64!(self + TMAP_capacity, new_cap);
    var new_buf = calloc(new_cap, sizeof_TMAP_PAIR);
    u64!(self + TMAP_buffer, new_buf);
    var i = 0; var elt;
    while i < old_cap do
        elt = old_buf + i * sizeof_TMAP_PAIR;
        if u64@(elt) then
            map_set(self, u64@(elt), u64@(elt + TMAP_PAIR_val));
        end
        i += 1;
    end
    free(old_buf);
end

proc _map_at self: map, idx: int -> ptr in
    var buf = map_buffer(self);
    return buf + idx * sizeof_TMAP_PAIR;
end

proc map_find self: map, key: ptr in
    var comparer = map_comparer(self);
    var cache = cast(u64@(self + TMAP_cache), ptr);
    if cache and comparer(u64@(cache + TMAP_PAIR_key), key) then
        return cache;
    end
    var cap = map_cap(self);
    var hasher = map_hasher(self); 
    var idx = hasher(key) % cap;
    if idx < 0 then idx = 0 - idx; end
    var cur = _map_at(self, idx);
    while u64@(cur) do
        if comparer(u64@(cur), key) then
            u64!(self + TMAP_cache, cur);
            return cur;
        end
        idx = (idx + 1) % cap;
        cur = _map_at(self, idx);
    end
    return NULL;
end

proc map_set self: map, key: ptr, value: ptr in
    var comparer = map_comparer(self);
    var cache = cast(u64@(self + TMAP_cache), ptr);
    if cache and comparer(u64@(cache + TMAP_PAIR_key), key) then
        u64!(cache + TMAP_PAIR_val, value);
        return;
    end
    var cap = map_cap(self);
    if map_len(self) >= cap / MAP_Load_Factor then
        _map_expand(self);
        cap = map_cap(self);
    end
    
    var hasher = map_hasher(self);
    var idx = hasher(key) % cap;
    if idx < 0 then idx = 0 - idx; end
    var cur = _map_at(self, idx);
    while cur and u64@(cur) do
        if comparer(u64@(cur), key) then
            cur = NULL;
        else
            idx = (idx + 1) % cap;
            cur = _map_at(self, idx);
        end
    end
    cur = _map_at(self, idx);
    if not u64@(cur) then
        // increment length
        u64!(self + TMAP_length, u64@(self + TMAP_length) + 1);
    end
    u64!(cur + TMAP_PAIR_key, key);
    u64!(cur + TMAP_PAIR_val, value);
    u64!(self + TMAP_cache, cur);
end

proc map_remove self: map, elem: ptr in
    var cap = map_cap(self);
    var hasher = map_hasher(self);
    var idx = hasher(elem) % cap;
    if idx < 0 then idx = 0 - idx; end
    var comparer = map_comparer(self);
    var cur = _map_at(self, idx);
    while cur and u64@(cur) do
        if comparer(u64@(cur), elem) then
            cur = NULL;
        else
            idx = (idx + 1) % cap;
            cur = _map_at(self, idx);
        end
    end
    cur = _map_at(self, idx);
    if u64@(cur) then
        // decrement length
        u64!(self + TMAP_length, u64@(self + TMAP_length) - 1);
    end
    u64!(cur, NULL);
end

proc map_end self: map -> map_iterator in
    return cast(_map_at(self, map_cap(self)), map_iterator);
end

proc map_begin self: map -> map_iterator in
    var cur = _map_at(self, 0);
    var end_ = map_end(self);
    if map_len(self) == 0 then
        return end_;
    end
    while cur != end_ do
        if u64@(cur) then
            return cast(cur, map_iterator);
        end
        cur = cur + sizeof_TMAP_PAIR;
    end
    return end_;
end

proc map_next self: map, iter: map_iterator -> map_iterator in
    iter = cast(cast(iter, ptr) + sizeof_TMAP_PAIR, map_iterator);
    var end_ = map_end(self);
    while iter != end_ do
        if u64@(iter) then
            return iter;
        end
        iter = cast(cast(iter, ptr) + sizeof_TMAP_PAIR, map_iterator);
    end
    return end_;
end
