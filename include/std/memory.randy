#include core

extern malloc: (int -> ptr);
extern calloc: (int, int -> ptr);
extern free: (ptr -> void);
extern memcpy: (ptr, ptr, int -> ptr);
extern memset: (ptr, char, int -> ptr);
extern memmove: (ptr, ptr, int -> ptr);

// def _malloc_logger pointer in
//     printf("malloc'd %p\n", pointer);
// end

// asm __def_malloc in
//     "
//     call malloc
//     #pushq %rax
//     #movq %rax, %rdi
//     #call _def__malloc_logger
//     #popq %rax
//     ret
//     "
// end

// def malloc size in
//     var mem = __def_malloc(size);
//     if not mem then
//         _error("malloc returned nullptr");
//         abort();
//     end
//     return mem;
// end

// asm __def_calloc in
// "
//     call calloc
//     ret
// "
// end

// def calloc num, size in
//     var mem = __def_calloc(num, size);
//     if not mem then
//         _error("calloc returned nullptr");
//         abort();
//     end
//     return mem;
// end



// def _free_logger ptr in
//     printf("freed'd %p\n", ptr);
// end

// asm __def_free in
//     "
//     #pushq %rdi
//     #call _def__free_logger
//     #popq %rdi
//     call free
//     ret
//     "
// end

// def free pointer in
//     return __def_free(pointer);
// end
