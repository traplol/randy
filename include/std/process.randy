#include core
#include memory
#include syscall

proc execve path: cstr, argv: ptr, envp: ptr -> int in
    return cast(syscall(SYS_execve, path, argv, envp), int);
end

proc fork in
    return cast(syscall(SYS_fork), int);
end

const P_PID = 1;
proc waitpid pid: int, siginfo: siginfo, options: int in
    return cast(syscall(SYS_waitid, P_PID, pid, siginfo, options), int);
end

const TSIGINFO_si_signo  = 0;
const TSIGINFO_si_code   = 8;
const TSIGINFO_si_value  = 24;
const TSIGINFO_si_errno  = 4;
const TSIGINFO_si_pid    = 16;
const TSIGINFO_si_uid    = 20;
const TSIGINFO_si_addr   = 16;
const TSIGINFO_si_status = 24;
const TSIGINFO_si_band   = 16;
const sizeof_TSIGINFO    = 128;

proc make_siginfo -> siginfo in
    return cast(malloc(sizeof_TSIGINFO), siginfo);
end

proc free_siginfo self: siginfo in
    free(self);
end

proc siginfo_si_signo self: siginfo in return cast(u32@(self + TSIGINFO_si_signo), int); end
proc siginfo_si_code self: siginfo in return cast(u32@(self + TSIGINFO_si_code), int); end
proc siginfo_si_value self: siginfo in return cast(u64@(self + TSIGINFO_si_value), int); end
proc siginfo_si_errno self: siginfo in return cast(u32@(self + TSIGINFO_si_errno), int); end
proc siginfo_si_pid self: siginfo in return cast(u32@(self + TSIGINFO_si_pid), int); end
proc siginfo_si_uid self: siginfo in return cast(u32@(self + TSIGINFO_si_uid), int); end
proc siginfo_si_addr self: siginfo in return cast(u64@(self + TSIGINFO_si_addr), int); end
proc siginfo_si_status self: siginfo in return cast(u32@(self + TSIGINFO_si_status), int); end
proc siginfo_si_band self: siginfo in return cast(u64@(self + TSIGINFO_si_band), int); end

proc subprocess_blocking path: cstr, argv: ptr, envp: ptr in
    var pid = fork();
    if pid == 0 then // child proc
        return execve(path, argv, envp);
    else
        var siginfo = make_siginfo();
        waitpid(pid, siginfo, 4);
        free_siginfo(siginfo);
    end
    return 0;
end
