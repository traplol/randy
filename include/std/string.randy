
#include core
#include memory

extern strlen: (cstr -> int);

struct String in
    buffer: char&;
    length: int;
    capacity: int;

    def new init: int in
        var self = cast(malloc(__sizeof(String)), String&);
        self.buffer = malloc(init);
        self.length = 0;
        self.capacity = init;
        return self;
    end

    def delete self in
        if self then
            free(self.buffer);
            free(self);
        end
    end

    def reset self in
        self.length = 0;
    end

    def get self, idx: int -> char in
        return cast(u8@(self.buffer + idx), char);
    end

    def set self, idx: int, val: char in
        u8!(self.buffer + idx, val);
    end

    def resize self, new_cap: int in
        if new_cap < self.length or new_cap < self.capacity then
            return;
        end
        var new = malloc(new_cap);
        var old = self.buffer;
        var len = self.length;
        if new_cap < len then
            len = new_cap;
        end
        memcpy(new, old, len);
        free(old);
        self.buffer = new;
        self.length = len;
        self.capacity = new_cap;
    end

    def push self, val: char in
        var len = self.length;
        var cap = self.capacity;
        if len == cap then
            self.resize(2 * cap + 1);
        end
        self.set(len, val);
        self.length = len + 1;
    end

    def pop self in
        var len = self.length;
        if len > 0 then
            self.length = len - 1;
        else
            printf("ERROR: String::pop out of bounds.\n");
            abort();
        end
    end

    def back self -> char in
        var len = self.length;
        if len > 0 then
            return self.get(len-1);
        end
        printf("ERROR: String::back out of bounds.\n");
        abort();
    end

    def append_string self, string: String& in
        var new_len = self.length + string.length;
        if new_len > self.capacity then
            self.resize(new_len);
        end
        memcpy(self.buffer + self.length, string.buffer, string.length);
        self.length = new_len;
    end

    def append_cstr self, cstr: cstr in
        var n = strlen(cstr);
        if n + self.length > self.capacity then
            self.resize(self.length + n);
        end
        var str_end = self.buffer + self.length;
        memcpy(str_end, cstr, n);
        self.length += n;
    end

    def new_from_cstr cstr: cstr -> String& in
        var n = strlen(cstr);
        var string = String::new(n);
        memcpy(string.buffer, cstr, n);
        string.length = n;
        return string;
    end

    def cstr self: String& -> cstr in
        var len = self.length;
        if len == self.capacity then
            self.resize(len + 1);
        end
        self.set(len, 0);
        return self.buffer;
    end

    def duplicate self: String& -> String& in
        var copy = String::new(self.capacity);
        memcpy(copy.buffer, self.buffer, self.length);
        copy.length = self.length;
        return copy;
    end

    def append_int_slow self, n: int in
        // no zero check because this isn't called unless very positive or very negative number.
        var temp = n;
        var len = 0;
        while temp != 0 do
            len = len + 1;
            temp = temp / 10;
        end
        if n < 0 then
            len = len + 1;
        end
        var buf = malloc(len + 1);
        var idx = 0;
        var k = 0;
        if n < 0 then
            u8!(buf + idx, '-');
            idx = idx + 1;
            k = 1;
            n = -n;
        end
        var DIGITS = "098765432101234567890" + 10;
        while idx < len do
            u8!(buf + (len - idx - (1 - k)), u8@(DIGITS + n % 10));
            n /= 10;
            idx = idx + 1;
        end
        u8!(buf + len, 0);
        self.append_cstr(buf);
        free(buf);
    end

    def append_int self, n: int in
        // This will iteratively generate the characters for n -> str in left-to-right
        // order but it will fail when we start to approach numbers that will overflow.
        // We consider the alternative method "slow" because it does the same length
        // calculation and but it also does a malloc/free for the intermediate result
        // while this procedure does not.
        if n < -100000000000000000 or n > 100000000000000000 then
            self.append_int_slow(n);
            return;
        end
        if n < 0 then
            self.push('-');
        end

        if n < 0 then
            n = -n;
        end

        if n < 10 then
            self.push('0' + n);
            return;
        end

        var k = 1;
        while (n / k) != 0 do
            k *= 10;
        end
        k /= 10;

        while k != 0 do
            self.push('0' + (n / k));
            n %= k;
            k /= 10;
        end
    end

end

def string_eq string_a: String&, string_b: String& -> bool in
    if string_a == string_b then
        return true;
    end
    if not string_a or not string_b then
        return false;
    end

    var a_len = string_a.length;
    var b_len = string_b.length;
    if a_len != b_len then
        return false;
    end

    var i = 0;
    while i < a_len do
        if string_a.get(i) != string_b.get(i) then
            return false;
        end
        i += 1;
    end
    return true;
end

def cstr_eq cstr_a: cstr, cstr_b: cstr -> bool in
    if cstr_a == cstr_b then
        return true;
    end
    if not cstr_a or not cstr_b then
        return false;
    end

    var a = u8@(cstr_a);
    var b = u8@(cstr_b);
    while a == b and a do
        a = u8@(cstr_a);
        b = u8@(cstr_b);
        cstr_a += 1;
        cstr_b += 1;
    end
    return a == b;
end

def cstr_len cstr: cstr -> int in
    var i = 0;
    while u8@(cstr) do
        i += 1;
        cstr += 1;
    end
    return i;
end
