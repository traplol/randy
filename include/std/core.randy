
#include syscall
#include file

extern puts cstr;
extern printf fmt, ...;
extern fprintf file, fmt, ...;
extern fflush file;
extern putchar char;

extern stdin;
extern stdout;
extern stderr;
extern strerror errnum;

const true: bool = cast(1, bool);
const false: bool = cast(0, bool);
const NULL: ptr = cast(0, ptr);
const sizeof_PTR = 8;

def _flush_output in
    fflush(u64@(stdout));
    fflush(u64@(stderr));
end

asm errno in
"
    call __errno_location
    movl (%rax), %eax
    cltq
    ret
"
end


def _error msg in
    fprintf(u64@(stderr), "ERRNO: %s -> %s\n", strerror(errno()), msg);
end

def exit code: int in
    _flush_output();
    syscall(SYS_exit, code);
end

asm __builtin_trap in
"
    ud2
"
end

asm __builtin_break in
"
    int3
"
end

def abort in
    _flush_output();
    __builtin_trap();
end
