#include core
#include syscall
#include memory

struct Timespec in
    tv_sec: int;
    tv_nsec: int;
end

def make_timespec sec, nsec in
    var self = cast(malloc(__sizeof(Timespec)), Timespec&);
    self.tv_sec = sec;
    self.tv_nsec = nsec;
    return self;
end

def make_empty_timespec in
    return make_timespec(0, 0);
end

def free_timespec self: Timespec& in
    free(self);
end

const CLOCK_REALTIME      = 0;
const CLOCK_MONOTONIC_RAW = 4;

def time timespec: Timespec& in
    return syscall(SYS_clock_gettime, CLOCK_MONOTONIC_RAW, timespec);
end

def clock timespec: Timespec& in
    return syscall(SYS_clock_gettime, CLOCK_REALTIME, timespec);
end

const CLOCK_US_PER_NS = 1000;
const CLOCK_MS_PER_US = 1000;
const CLOCK_S_PER_MS  = 1000;
const CLOCK_S_PER_US  = CLOCK_S_PER_MS * CLOCK_MS_PER_US;
const CLOCK_NS_BOUNDS = CLOCK_S_PER_MS * CLOCK_MS_PER_US * CLOCK_US_PER_NS;

def usleep usec in
    if usec < 0 then
        return;
    end
    var sec = usec / CLOCK_S_PER_US;
    var rem = usec % CLOCK_S_PER_US;
    // FIXME: when we allow stack allocations put these on the stack!
    var sleeptime = make_timespec(sec, rem * CLOCK_US_PER_NS);
    var remtime = make_empty_timespec();
    syscall(SYS_nanosleep, sleeptime, remtime);
    free_timespec(sleeptime);
    free_timespec(remtime);
end
