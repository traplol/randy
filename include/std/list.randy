#include core
#include memory

const TLIST_head = 0;
const TLIST_tail = 8;
const sizeof_TLIST = 16;

const TLIST_NODE_next = 0;
const TLIST_NODE_data = 8;
const sizeof_TLIST_NODE = 16;

def make_list_node data: ptr -> list_node in
    var node = malloc(sizeof_TLIST_NODE);
    u64!(node + TLIST_NODE_next, NULL);
    u64!(node + TLIST_NODE_data, data);
    return cast(node, list_node);
end

def free_list_node node: list_node in
    free(node);
end

def list_node_next node: list_node -> list_node in
    return cast(u64@(node + TLIST_NODE_next), list_node);
end

def list_node_data node: list_node -> ptr in
    return cast(u64@(node + TLIST_NODE_data), ptr);
end

def make_list -> list in
    var list = malloc(sizeof_TLIST);
    u64!(list + TLIST_head, NULL);
    u64!(list + TLIST_tail, NULL);
    return cast(list, list);
end

def list_head list: list -> list_node in
    return cast(u64@(list + TLIST_head), list_node);
end

def list_tail list: list -> list_node in
    return cast(u64@(list + TLIST_tail), list_node);
end

def free_list list: list in
    var cur = list_head(list);
    var tail = list_tail(list);
    var next;
    while cur do
        next = list_node_next(cur);
        free_list_node(cur);
        cur = next;
        if cur == tail then
            free_list_node(cur);
            cur = NULL;
        end
    end
    free(list);
end

def list_append list: list, data: ptr in
    var node = make_list_node(data);
    u64!(node + TLIST_NODE_data, data);

    var tail = list_tail(list);
    if tail then
        u64!(tail + TLIST_NODE_next, node);
    else
        u64!(list + TLIST_head, node);
    end
    u64!(list + TLIST_tail, node);
end

