#include core
#include memory

const TLIST_head = 0;
const TLIST_tail = 8;
const sizeof_TLIST = 16;

const TLIST_NODE_next = 0;
const TLIST_NODE_data = 8;
const sizeof_TLIST_NODE = 16;

proc make_list_node data in
    var node = malloc(sizeof_TLIST_NODE);
    u64!(node + TLIST_NODE_next, NULL);
    u64!(node + TLIST_NODE_data, data);
    return node;
end

proc free_list_node node in
    free(node);
end

proc list_node_next node in
    return u64@(node + TLIST_NODE_next);
end

proc list_node_data node in
    return u64@(node + TLIST_NODE_data);
end

proc make_list in
    var list = malloc(sizeof_TLIST);
    u64!(list + TLIST_head, NULL);
    u64!(list + TLIST_tail, NULL);
    return list;
end

proc list_head list in
    return u64@(list + TLIST_head);
end

proc list_tail list in
    return u64@(list + TLIST_tail);
end

proc free_list list in
    var cur = list_head(list);
    var tail = list_tail(list);
    var next;
    while cur do
        next = list_node_next(cur);
        free_list_node(cur);
        cur = next;
        if cur == tail then
            free_list_node(cur);
            cur = NULL;
        end
    done
    free(list);
end

proc list_append list, data in
    var node = make_list_node(data);
    u64!(node + TLIST_NODE_data, data);

    var tail = list_tail(list);
    if tail then
        u64!(tail + TLIST_NODE_next, node);
    else
        u64!(list + TLIST_head, node);
    end
    u64!(list + TLIST_tail, node);
end

