#include std/core
#include std/memory

// start with the simplest set of useful programming constructs:
// machine words (integers/pointers)
// memory read / memory write
// variables
// procedures
// conditional branching (if/else)
// looping (while)
// basic operations:
//       arithmetic        + - * / %
//       boolean logic     not or and
//       relational        == != < <= > >=
//       bit manipulation  << >> | & ^ ~
//       syscall
// 
// no structs
// no arrays
// no type checking
// 
// arrays and structs can be simulated with functions that perform reads/writes on pointers



// Only procedures are allowed at the top level.

// Define a procedure with "def NAME ARGS_LIST in BODY end"
// Return values are explicit but they a not type checked.
// Calling a function that doesn't return anything and using it like it does return
// something is undefined behaviour.

def def_name rdi, rsi, rdx in
    return rsi - rdi * rdx;
end

def hello_world in
    // "string" literals are just regular integers/pointers provided as a convenience by
    // the compiler.
    puts("hello world");
    // 'c'haracter literals are also just convenience from the compiler.
    putchar('\n');
end

def foo a, b, c in
    a = a * a;
    b = a * b;
    c = a * c;
    return a + b + c;
end

def factorial n in
    if n < 2 then
        return 1;
    else
        return n * factorial(n-1);
    end
end

def fib n in
    if n < 2 then
        return n;
    else
        return fib(n-2) + fib(n-1);
    end
end

def count_to_n n in
    // Define a variable with "var"
    var i = 0;
    while i < n do
        printf("num=%d\n", i);
        i += 1;
    end 
end

def mod5 n in
    return n % 5;
end

def fizz_buzz n in
    var i = 1;
    while i <= n do
        if (i % 3 == 0) and (i % 5 == 0) then
            puts("fizzbuzz");
        elif i % 3 == 0 then
            puts("fizz");
        elif i % 5 == 0 then
            puts("buzz");
        else
            printf("%d\n", i);
        end
        i += 1;
    end
end

def memory_access in
    var ptr = malloc(20); // Allocate 20 bytes.

    // 8, 16, 32, and 64-bit memory writes
    u8!(ptr  + 0, 69);
    u16!(ptr + 0 + 1, 1111);
    u32!(ptr + 0 + 1 + 2, 22222);
    u64!(ptr + 0 + 1 + 2 + 4, 3333333);

    // 8, 16, 32, and 64-bit memory reads
    var w = u8@(ptr + 0);
    printf("num=%d\n", w);
    var x = u16@(ptr + 0 + 1);
    printf("num=%d\n", x);
    var y = u32@(ptr + 0 + 1 + 2);
    printf("num=%d\n", y);
    var z = u64@(ptr + 0 + 1 + 2 + 4);
    printf("num=%d\n", z);

    u8!(ptr + 0, 'h');
    u8!(ptr + 1, 'e');
    u8!(ptr + 2, 'l');
    u8!(ptr + 3, 'l');
    u8!(ptr + 4, 'o');
    u8!(ptr + 5, ' ');
    // Pointer "offsets" are entirely manual with byte-granularity.
    u32!(ptr + 6, 1819438967); // on little-endian this is "worl"
    u8!(ptr + 10, 'd');
    u8!(ptr + 11, '!');
    u8!(ptr + 12, 0);

    puts(ptr);

    // Don't forget to free the memory!
    free(ptr);
end

def min a, b in
    if a < b then
        return a;
    end
    return b;
end

const SYS_exit = 60;
const FOO = SYS_exit;
const BAR = "hello";
const Number = 42;
const Newline = '\n';

def main in
    printf("num=%d\n", 12345);
    memory_access();

    fizz_buzz(100);
    printf("num=%d\n", factorial(10));
    printf("num=%d\n", fib(10));
    printf("num=%d\n", fib(20));
    printf("num=%d\n", fib(30));
    count_to_n(10);

    printf("num=%d\n", not 123);

    var i = 0;
    while i < 46 do
        printf("hello world. i = %d, %d, %d, %d\n", i, i % 3, i % 5, i % 15);
        i += 1;
    end

    printf("num=%d\n", SYS_write);

    puts(BAR);

    return 69;
end

