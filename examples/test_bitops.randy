#include std/core

proc test msg, cond in
    if cond then
        printf("pass: %s\n", msg);
    else
        printf("fail: %s\n", msg);
    end
end

proc test_not in
    test("~0 is -1", ~0 == -1);
    test("~-1 is 0", ~-1 == 0);
    test("~1 is -2", ~1 == -2);
    test("~-2 is 1", ~-2 == 1);
    // 1 << 31
    test("~2147483648 is -2147483649", ~2147483648 == -2147483649);
    test("~-2147483649 is 2147483648", ~-2147483649 == 2147483648);
    // 1 << 32
    test("~4294967296 is -4294967297", ~4294967296 == -4294967297);
    test("~-4294967297 is 4294967296", ~-4294967297 == 4294967296);
    // 1 << 63
    test("~9223372036854775807 is -9223372036854775808", ~9223372036854775807 == -9223372036854775808);
    test("~-9223372036854775808 is 9223372036854775807", ~-9223372036854775808 == 9223372036854775807);

end

proc test_xor in
    test("1 ^ 1 is 0", (1 ^ 1) == 0);
    test("1 ^ 0 is 1", (1 ^ 0) == 1);
    test("0 ^ 0 is 0", (0 ^ 0) == 0);
    test("0 ^ 1 is 1", (0 ^ 1) == 1);
    test("0b10101010 ^ 0b01010101 is 0b11111111", (170 ^ 85) == 255);
    test("0b11001100 ^ 0b01010101 is 0b10011001", (204 ^ 85) == 153);
end

proc test_and in
    test("1 & 1 is 0", (1 & 1) == 1);
    test("1 & 0 is 1", (1 & 0) == 0);
    test("0 & 0 is 0", (0 & 0) == 0);
    test("0 & 1 is 1", (0 & 1) == 0);
    test("0b10101010 & 0b01010101 is 0b00000000", (170 & 85) == 0);
    test("0b11001100 & 0b01010101 is 0b01000100", (204 & 85) == 68);
end

proc test_or in
    test("1 | 1 is 1", (1 | 1) == 1);
    test("1 | 0 is 1", (1 | 0) == 1);
    test("0 | 0 is 0", (0 | 0) == 0);
    test("0 | 1 is 1", (0 | 1) == 1);
    test("0b10101010 | 0b01010101 is 0b11111111", (170 | 85) == 255);
    test("0b11001100 | 0b01010101 is 0b11011101", (204 | 85) == 221);
end

proc test_shift_left in
    test("0 << 0 is 0", (0 << 0) == 0);
    test("0 << 1 is 0", (0 << 1) == 0);
    test("1 << 0 is 1", (1 << 0) == 1);
    test("1 << 1 is 2", (1 << 1) == 2);
    test("1 << 2 is 4", (1 << 2) == 4);
    test("1 << 3 is 8", (1 << 3) == 8);
    test("1 << 31 is 2147483648", (1 << 31) == 2147483648);
    test("1 << 32 is 4294967296", (1 << 32) == 4294967296);
    test("1 << 62 is 4611686018427387904", (1 << 62) == 4611686018427387904);
    test("1 << 63 is -9223372036854775808", (1 << 63) == -9223372036854775808);
    test("1 << 64 is 1", (1 << 64) == 1);
end

proc test_shift_right in
    test("0 >> 0 is 0", (0 >> 0) == 0);
    test("0 >> 1 is 0", (0 >> 1) == 0);
    test("10 >> 1 is 5", (10 >> 1) == 5);
    test("10 >> 2 is 2", (10 >> 2) == 2);
    test("10 >> 3 is 1", (10 >> 3) == 1);
    test("10 >> 4 is 0", (10 >> 4) == 0);
    test("2147483648 >> 31 is 1", (2147483648 >> 31) == 1);
    test("4294967296 >> 32 is 1", (4294967296 >> 32) == 1);
    test("4611686018427387904 >> 31 is 2147483648", (4611686018427387904 >> 31) == 2147483648);
    test("-9223372036854775808 >> 32 is -2147483648", (-9223372036854775808 >> 32) == -2147483648);
end

proc test_precedence in
    test("-1109977348 ^ -3376289167 & -3025785286 ^ 1582495014 ^ 2443749081 | 56740593 is 1944973299", 1944973299 == (-1109977348 ^ -3376289167 & -3025785286 ^ 1582495014 ^ 2443749081 | 56740593));
    test("587661749 & 291323364 & 3540408141 ^ 269838236 & 3850052591 & 3584741438 is 17039624", 17039624 == (587661749 & 291323364 & 3540408141 ^ 269838236 & 3850052591 & 3584741438));
    test("2312963827 & -951979549 & -476628329 | 3366528025 | -656940519 | 531283189 is -536871169", -536871169 == (2312963827 & -951979549 & -476628329 | 3366528025 | -656940519 | 531283189));
    test("-2350547484 ^ -2613026211 | -426900614 & 1348790630 & 1529374162 ^ -1798226888 is -671793157", -671793157 == (-2350547484 ^ -2613026211 | -426900614 & 1348790630 & 1529374162 ^ -1798226888));
    test("-2966159189 | -2538074499 ^ 2546699123 ^ 603213508 ^ 703537165 | -3678311738 is -136209", -136209 == (-2966159189 | -2538074499 ^ 2546699123 ^ 603213508 ^ 703537165 | -3678311738));
    test("-2014548140 & -282859686 & -3987025803 & -1182270117 & 2367999152 | -4115086324 is -4115086308", -4115086308 == (-2014548140 & -282859686 & -3987025803 & -1182270117 & 2367999152 | -4115086324));
    test("2260767166 & 611511612 | -36391810 & -263926765 ^ -3870005808 | 3532230036 is 4292472318", 4292472318 == (2260767166 & 611511612 | -36391810 & -263926765 ^ -3870005808 | 3532230036));
    test("2892427084 & -839652222 | 1857342353 ^ 2958043861 ^ 3833897798 & 670571400 is 4268158532", 4268158532 == (2892427084 & -839652222 | 1857342353 ^ 2958043861 ^ 3833897798 & 670571400));
    test("1001877669 & 535590696 & 24429354 & -3149148656 | 477747384 | 2039290317 is 2113788413", 2113788413 == (1001877669 & 535590696 & 24429354 & -3149148656 | 477747384 | 2039290317));
    test("-1860992199 & 2191132187 | 793873687 | -3843279912 ^ 2236238784 ^ -3532150755 is 3218333471", 3218333471 == (-1860992199 & 2191132187 | 793873687 | -3843279912 ^ 2236238784 ^ -3532150755));
end

proc main in
    test_not();
    test_xor();
    test_and();
    test_or();
    test_shift_left();
    test_shift_right();
    test_precedence();
    return 0;
end
