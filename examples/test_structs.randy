#include std/core
#include std/vector

struct Point in
    x: int;
    y: int;
end

def make_point x, y -> Point& in
    var self = cast(malloc(__sizeof(Point)), Point&);
    self.x = x;
    self.y = y;
    return self;
end

def free_point self: Point& in
    free(self);
end

struct Player in
    name: cstr;
    health: int;
    // Point is a struct by value
    // Point& would be a reference to a Point struct
    pos: Point;

    def move self, dx, dy in
        self.pos.x += dx;
        self.pos.y += dy;
    end

    def take_damage self, n in
        self.health -= n;
    end
end

def make_player name, health, x, y -> Player& in
    var player = cast(malloc(__sizeof(Player)), Player&);
    player.name = name;
    player.health = health;
    player.pos.x = x;
    player.pos.y = y;
    return player;
end

def free_player self: Player& in
    if self then
        free(self);
    end
end

def print_player player: Player& in
    printf("player: %s health: %d\n", player.name, player.health);
    printf("  at x=%d, y=%d\n", player.pos.x, player.pos.y);
end

const PLAYER_NAME = "abcdefghijklmnopqrstuvwxyz";

def make_players n: int in
    var players = Vector::new(n);
    var i = 0;
    while i < n do
        var player = make_player(PLAYER_NAME, 100 + i, i * 11, i * i);
        Player::move(player, 10, 20);
        Player::take_damage(player, 30);
        players.push(player);
        i += 1;
    end
    return players;
end

def test_many_players in
    printf("test_many_players: creating many `Player` objects.\n");
    var players = make_players(100000);
    printf("test_many_players: checking the player fields are correct.\n");
    var i = 0; var len = players.length;
    while i < len do
        var player = cast(players.get(i), Player&);
        if player.name != PLAYER_NAME then
            printf("test_many_players:fail on player.name\n");
            return false;
        end
        if player.health != (100 + i - 30) then
            printf("test_many_players:fail on player.health\n");
            return false;
        end
        if player.pos.x != (i * 11) + 10 then
            printf("test_many_players:fail on player.pos.x\n");
            return false;
        end
        if player.pos.y != (i * i) + 20 then
            printf("test_many_players:fail on player.pos.y\n");
            return false;
        end
        i += 1;
    end

    printf("test_many_players: freeing the `Player` objects.\n");
    i = 0;
    while i < len do
        free_player(cast(players.get(i), Player&));
        i += 1;
    end
    players.delete();
    printf("test_many_players: pass\n");
    return true;
end

// Bar and Baz are structs by value
struct Foo in
    a: int;
    bar: Bar;
end

struct Bar in
    b: int;
    baz: Baz;
end

struct Baz in
    c: int;
end

def make_foo a, b, c -> Foo& in
    var self = cast(malloc(__sizeof(Foo)), Foo&);
    self.a = a;
    self.bar.b = b;
    self.bar.baz.c = c;
    return self;
end

def free_foo self: Foo& in
    free(self);
end

def test_many_foos in
    printf("test_many_foos: making many `Foo` objects.\n");
    var foos = Vector::new(100000);
    var i = 0; var len = foos.capacity;
    while i < len do
        foos.push(make_foo(i, i * i, i * i * i));
        i += 1;
    end
    printf("test_many_foos: checking `Foo` objects fields are correct.\n");
    i = 0;
    while i < len do
        var foo = cast(foos.get(i), Foo&);
        if foo.a != i then
            printf("test_many_foos: fail on foo.a\n");
            return false;
        end
        if foo.bar.b != i * i then
            printf("test_many_foos: fail on foo.bar.b\n");
            return false;
        end
        if foo.bar.baz.c != i * i * i then
            printf("test_many_foos: fail on foo.bar.baz.c\n");
            return false;
        end
        i += 1;
    end

    printf("test_many_foos: freeing the `Foo` objects.\n");
    i = 0;
    while i < len do
        free_foo(cast(foos.get(i), Foo&));
        i += 1;
    end
    foos.delete();
    printf("test_many_foos: pass\n");
    return true;
end

def test_member_access_from_return in
    printf("testing member access works with function calls\n");
    if Vector::new(12345).capacity != 12345 then
        printf("test_member_access_from_return: fail");
    end
    printf("test_member_access_from_return: pass\n");
    return true;
end

def main in
    if not test_many_players() then
        printf("test_many_players: fail.\n");
        return 1;
    end

    if not test_many_foos() then
        printf("test_many_foos: fail.\n");
        return 1;
    end

    if not test_member_access_from_return() then
        printf("test_member_access_from_return: fail.\n");
        return 1;
    end
    printf("pass all\n");
    return 0;
end
