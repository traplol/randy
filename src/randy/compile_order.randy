
def _compile_order_visit tt, st, stmt, seen, order in
    if not stmt then
        return;
    end
    var k = stmt.kind;
    if k == AstK::Call then
        _compile_order_visit_vector(tt, st, stmt.u.call.args, seen, order);
        _compile_order_visit(tt, st, stmt.u.call.expr, seen, order);
    elif k == AstK::Ident then
        var sym = st_get_symbol(st, stmt.u.ident);
        if symbol_is_def(sym) then
            if seen.contains(sym) then
                return;
            end
            seen.insert(sym);
            var type = symbol_type(sym);
            assert(type, "Type for %s was null.\n", symbol_name(sym));
            var def_ = type_ast(type);
            assert(def_, "AST for symbol %s was null\n", symbol_name(sym));
            _compile_order_def(tt, st, def_, seen, order);
        end
    elif k == AstK::BinOp then
        _compile_order_visit(tt, st, stmt.u.binop.lhs, seen, order);
        _compile_order_visit(tt, st, stmt.u.binop.rhs, seen, order);
    elif k == AstK::Return then
        _compile_order_visit(tt, st, stmt.u.return_, seen, order);
    elif k == AstK::VarAssign then
        _compile_order_visit(tt, st, stmt.u.var_assign.expr, seen, order);
    elif k == AstK::IfElse then
        _compile_order_visit(tt, st, stmt.u.if_else.test, seen, order);
        _compile_order_visit_vector(tt, st, stmt.u.if_else.consequence, seen, order);
        _compile_order_visit_vector(tt, st, stmt.u.if_else.alternative, seen, order);
    elif k == AstK::While then
        _compile_order_visit(tt, st, stmt.u.while_.test, seen, order);
        _compile_order_visit_vector(tt, st, stmt.u.while_.body, seen, order);
    elif k == AstK::PointerRead then
        _compile_order_visit(tt, st, stmt.u.ptr_op.args.get(0), seen, order);
    elif k == AstK::PointerWrite then
        _compile_order_visit(tt, st, stmt.u.ptr_op.args.get(0), seen, order);
        _compile_order_visit(tt, st, stmt.u.ptr_op.args.get(1), seen, order);
    elif k == AstK::Prefix then
        _compile_order_visit(tt, st, stmt.u.prefix.expr, seen, order);
    elif k == AstK::AssignOp then
        _compile_order_visit(tt, st, stmt.u.assign_op.expr, seen, order);
    elif k == AstK::Cast then
        _compile_order_visit(tt, st, stmt.u.cast_.expr, seen, order);
    elif k == AstK::MemberAccess then
        _compile_order_visit(tt, st, stmt.u.member_access.expr, seen, order);
    elif k == AstK::AssignMember then
        _compile_order_visit(tt, st, stmt.u.assign_member.lhs, seen, order);
        _compile_order_visit(tt, st, stmt.u.assign_member.rhs, seen, order);
    elif k == AstK::ScopeResolve then
        var type = scope_resolve_lhs(tt, stmt.u.scope_resolve.lhs, false);
        if type then
            _compile_order_visit_type(tt, st, type, seen, order);
        end
    end
end

def _compile_order_visit_type tt, st, type, seen, order in
    if seen.contains(type) then
        return;
    end
    seen.insert(type);
    if type_is_struct(type) then
        var defs = type_struct_defs(type);
        var i = 0; var len = defs.length;
        while i < len do
            var sym = defs.get(i);
            if not seen.contains(sym) then
                seen.insert(sym);
                assert(sym.type, "Type for %s was null.\n", sym.name);
                var def_ = type_ast(sym.type);
                assert(def_, "AST for symbol %s was null\n", sym.name);
                _compile_order_def(tt, st, def_, seen, order);
            end
            i += 1;
        end

        var fields = type_struct_fields(type);
        i = 0; len = fields.length;
        while i < len do
            var field = fields.get(i);
            _compile_order_visit_type(tt, st, field.type, seen, order);
            i += 1;
        end
    elif type_is_enum(type) then
        // nothing
    elif type_is_union(type) then
        var fields = type_union_fields(type);
        var i = 0; var len = fields.length;
        while i < len do
            var field = fields.get(i);
            _compile_order_visit_type(tt, st, field.type, seen, order);
            i += 1;
        end
    end
end

def _compile_order_visit_vector tt, st, vector, seen, order in
    var i = 0; var len = vector.length;
    while i < len do
        var stmt = vector.get(i);
        _compile_order_visit(tt, st, stmt, seen, order);
        i += 1;
    end
end

def _compile_order_def tt, st, def_, seen, order in
    _compile_order_visit_vector(tt, st, def_.u.def_.body, seen, order);
    order.push(def_);
end

def compile_order_main roots, type_table, symbol_table -> Vector[Ast&]& in
    var main_def: Ast& = NULL;
    var exit_def: Ast& = NULL;
    var compile_order = Vector[Ast&]::new(128);
    var i = 0; var len = roots.length;
    while i < len do
        var ast = roots.get(i);
        if ast.kind == AstK::Def then
            if cstr_eq("main", ast.u.def_.ident) then
                main_def = ast;
            elif cstr_eq("exit", ast.u.def_.ident) then
                exit_def = ast;
            end
        else
            compile_order.push(ast);
        end
        i += 1;
    end
    if not main_def then
        compile_order.delete();
        return NULL;
    end
    var seen = Set[ptr, PtrHashCompare, PtrHashCompare]::new(0);
    _compile_order_def(type_table, symbol_table, main_def, seen, compile_order);
    if exit_def and not seen.contains(st_get_symbol(symbol_table, exit_def.u.def_.ident)) then
        _compile_order_def(type_table, symbol_table, exit_def, seen, compile_order);
    end
    seen.delete();
    return compile_order;
end
