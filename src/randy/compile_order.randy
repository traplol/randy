
def _compile_order_visit tt, st, stmt, seen, order in
    if not stmt then
        return;
    end
    var k = ast_kind(stmt);
    if k == AstK_Call then
        _compile_order_visit_vector(tt, st, ast_args(stmt), seen, order);
        _compile_order_visit(tt, st, ast_expr(stmt), seen, order);
    elif k == AstK_Ident then
        var sym = st_get_symbol(st, ast_ident(stmt));
        if symbol_is_def(sym) then
            if set_contains(seen, sym) then
                return;
            end
            set_add(seen, sym);
            var type = symbol_type(sym);
            assert(type, "Type for %s was null.\n", symbol_name(sym));
            var def_ = type_ast(type);
            assert(def_, "AST for symbol %s was null\n", symbol_name(sym));
            _compile_order_def(tt, st, def_, seen, order);
        end
    elif k == AstK_BinOp then
        _compile_order_visit(tt, st, ast_lhs(stmt), seen, order);
        _compile_order_visit(tt, st, ast_rhs(stmt), seen, order);
    elif k == AstK_Return then
        _compile_order_visit(tt, st, ast_expr(stmt), seen, order);
    elif k == AstK_VarAssign then
        _compile_order_visit(tt, st, ast_assign_expr(stmt), seen, order);
    elif k == AstK_IfElse then
        _compile_order_visit(tt, st, ast_test(stmt), seen, order);
        _compile_order_visit_vector(tt, st, ast_consequence(stmt), seen, order);
        _compile_order_visit_vector(tt, st, ast_alternative(stmt), seen, order);
    elif k == AstK_While then
        _compile_order_visit(tt, st, ast_test(stmt), seen, order);
        _compile_order_visit_vector(tt, st, ast_body(stmt), seen, order);
    elif k == AstK_PointerRead then
        _compile_order_visit(tt, st, ast_pop_args(stmt).get(0), seen, order);
    elif k == AstK_PointerWrite then
        _compile_order_visit(tt, st, ast_pop_args(stmt).get(0), seen, order);
        _compile_order_visit(tt, st, ast_pop_args(stmt).get(1), seen, order);
    elif k == AstK_Prefix then
        _compile_order_visit(tt, st, ast_expr(stmt), seen, order);
    elif k == AstK_AssignOp then
        _compile_order_visit(tt, st, ast_assign_expr(stmt), seen, order);
    elif k == AstK_Cast then
        _compile_order_visit(tt, st, ast_expr(stmt), seen, order);
    elif k == AstK_MemberAccess then
        _compile_order_visit(tt, st, ast_expr(stmt), seen, order);
    elif k == AstK_AssignMember then
        _compile_order_visit(tt, st, ast_lhs(stmt), seen, order);
        _compile_order_visit(tt, st, ast_rhs(stmt), seen, order);
    elif k == AstK_ScopeResolve then
        assert(ast_kind(ast_lhs(stmt)) == AstK_Type, "Nested resolution not supported yet.\n");
        assert(ast_kind(ast_rhs(stmt)) == AstK_Ident, "Nested resolution not supported yet.\n");
        var type = ast_type(ast_lhs(stmt));
        _compile_order_visit_type(tt, st, type, seen, order);
    // elif k == AstK_SizeofExpr then
    //     _compile_order_visit(tt, st, ast_expr(stmt), seen, order);
    end
end

def _compile_order_visit_type tt, st, type, seen, order in
    if set_contains(seen, type) then
        return;
    end
    set_add(seen, type);
    if type_is_struct(type) then
        var defs = type_struct_defs(type);
        var i = 0; var len = defs.length;
        while i < len do
            var sym = cast(defs.get(i), Symbol&);
            if not set_contains(seen, sym) then
                set_add(seen, sym);
                assert(sym.type, "Type for %s was null.\n", sym.name);
                var def_ = type_ast(sym.type);
                assert(def_, "AST for symbol %s was null\n", sym.name);
                _compile_order_def(tt, st, def_, seen, order);
            end
            i += 1;
        end

        var fields = type_struct_fields(type);
        i = 0; len = fields.length;
        while i < len do
            var field = cast(fields.get(i), Field&);
            _compile_order_visit_type(tt, st, field.type, seen, order);
            i += 1;
        end
    elif type_is_enum(type) then
        // nothing
    elif type_is_union(type) then
        assert(false, "TODO: _compile_order_visit_type for unions\n");
    end
end

def _compile_order_visit_vector tt, st, vector, seen, order in
    var i = 0; var len = vector.length;
    while i < len do
        var stmt = vector.get(i);
        _compile_order_visit(tt, st, stmt, seen, order);
        i += 1;
    end
end

def _compile_order_def tt, st, def_, seen, order in
    _compile_order_visit_vector(tt, st, ast_body(def_), seen, order);
    order.push(def_);
end

def compile_order_main roots, type_table, symbol_table -> Vector[ast]& in
    var main_def = NULL;
    var exit_def = NULL;
    var compile_order = Vector[ast]::new(128);
    var i = 0; var len = roots.length;
    while i < len do
        var ast = roots.get(i);
        if ast_kind(ast) == AstK_Def then
            if cstr_eq("main", ast_ident(ast)) then
                main_def = ast;
            elif cstr_eq("exit", ast_ident(ast)) then
                exit_def = ast;
            end
        else
            compile_order.push(ast);
        end
        i += 1;
    end
    if not main_def then
        compile_order.delete();
        return NULL;
    end
    var seen = make_set(0, NULL, NULL);
    _compile_order_def(type_table, symbol_table, main_def, seen, compile_order);
    if exit_def and not set_contains(seen, st_get_symbol(symbol_table, ast_ident(exit_def))) then
        _compile_order_def(type_table, symbol_table, exit_def, seen, compile_order);
    end
    free_set(seen);
    return compile_order;
end
