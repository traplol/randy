
extern strdup: (cstr -> cstr);

def read_file_to_string path: cstr -> String& in
    var fd = open_for_read(path);
    if fd < 0 then
        printf("error reading file: (%d) %s\n", fd, path);
        return cast(NULL, String&);
    end

    var buf = malloc(1024);
    var running = 1;
    var result = 0;
    var string = String::new(64);
    var x = 0;
    while running do
        result = read_file(fd, buf, 1023);
        if result < 0 then
            running = 0;
            printf("error reading file: %d\n", result);
            free(buf);
            string.delete();
            return cast(NULL, String&);
        elif result == 0 then
            running = 0;
        else
            x = 0;
            while x < result do
                string.push(u8@(buf+x));
                x += 1;
            end
        end
    end
    free(buf);

    string.push(0);
    return string;
end

def cstr_hash cstr: cstr -> int in
    var hash = 5381;
    var c = cast(u8@(cstr), char);
    while c do
        hash = hash * 33 + c;
        c = cast(u8@(cstr), char);
        cstr += 1;
    end
    return hash;
end

def string_hash string: String& -> int in
    var hash = 5381;
    var len = string.length;
    var i = 0;
    while i < len do
        hash = hash * 33 + string.get(i);
        i += 1;
    end
    return hash;
end

def int_from_string string: String& -> int in
    var result = 0;
    var i = string.length - 1;
    var k = 1;
    var c;
    while i >= 0 do
        c = string.get(i);
        if not is_digit(c) then
            i = 0;
        else
            result = result + (c - '0') * k;
            k *= 10;
        end
        i -= 1;
    end
    return result;
end

def NYI_ERR file: cstr, line: int, what: cstr in
    printf("'%s' not implemented\n", what);
    printf("  File \"%s\", line %d\n", file, line);
    exit(1);
end

def min a: int, b: int -> int in if a < b then return a; else return b; end end
def max a: int, b: int -> int in if a > b then return a; else return b; end end

def cstr_starts_with cstr: cstr, substr: cstr -> bool in
    if cstr == substr then
        return true;
    end

    while u8@(cstr) and u8@(substr) do
        if u8@(cstr) != u8@(substr) then
            return false;
        end
        cstr += 1;
        substr += 1;
    end
    return not u8@(substr);
end
