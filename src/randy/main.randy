#include std/core
#include std/string
#include std/vector
#include std/queue
#include std/set
#include std/map
#include std/time
#include std/process
#include std/limits

global g_SymbolTable: SymbolTable& = NULL;
global g_TypeTable: TypeTable& = NULL;
global g_Experimental = false;
global g_Errors = 0;

#include bits
#include utils
#include token
#include lexer
#include token_stream
#include ast
#include symbol_table
#include type_table
#include parsing
#include type_infer
#include type_checker
#include ir_context
#include compiler_context
#include x86_64_backend
#include compile_order
#include ir_v2

def print_timespan msg, starttime, endtime in
    var elap_s = endtime.tv_sec - starttime.tv_sec;
    var elap_ns = endtime.tv_nsec - starttime.tv_nsec;
    var elap_ms = (elap_s * 1000) + (elap_ns / 1000000);
    printf("%s%dms\n", msg, elap_ms);
end

def print_usage in
    printf("usage: randy -c file -o path [flags]\n");
    printf("Options and arguments:\n");
    printf("-h            : Show this message\n");
    printf("-c file       : Compile file\n");
    printf("-o path       : The path to compile the file provided by the -c flag.\n");
    printf("-I path       : Specify a path to search for #include directives.\n");
    printf("-g            : Enable debug info\n");
    printf("-ld flags...  : Everything after -ld will be passed to the linker directly.\n");
    printf("                see 'man ld' for linker flags.\n");
    printf("-v -vv -vvv   : Compiler verbosity level\n");
end

def assemble_and_link asm_path, obj_path, exe_path, ld_flags in
    var as_args = Vector[cstr]::new(0);
    as_args.push("as");
    as_args.push("-c");
    as_args.push(asm_path);
    as_args.push("-o");
    as_args.push(obj_path);
    as_args.push(NULL); // argv is required to be null terminated.
    subprocess_blocking("/usr/bin/as", as_args.buffer, NULL);

    var ld_args = Vector[cstr]::new(0);
    ld_args.push("ld");
    ld_args.push("-o");
    ld_args.push(exe_path);
    ld_args.push(obj_path);
    var i = 0; var len = ld_flags.length;
    while i < len do
        ld_args.push(ld_flags.get(i));
        i += 1;
    end
    ld_args.push(NULL);
    subprocess_blocking("/usr/bin/ld", ld_args.buffer, NULL);

    as_args.delete();
    ld_args.delete();
end

def main argc: int, argv: ptr in
    var i = 0;
    if argc < 2 then
        printf("No input file.\n");
        return 1;
    else
        var true_starttime = make_empty_timespec();
        var true_endtime = make_empty_timespec();
        time(true_starttime);

        var include_paths = Vector[String&]::new(8);
        include_paths.push(getcwd());

        var in_path: cstr = NULL;
        var out_path: cstr = NULL;
        var verbosity = 0;
        var debug = 0;
        var do_print_ir = false;
        var do_print_ast = false;
        var will_compile = true;
        var ld_flags = Vector[cstr]::new(0);

        i = 1; var p: cstr;
        while i < argc do
            var arg = cast(u64@(argv + i*sizeof_PTR), cstr);
            if cstr_eq("-h", arg) then
                print_usage();
                return 1;
            elif cstr_eq("-c", arg) then
                i += 1;
                if in_path then
                    printf("More than one input file not supported.\n");
                    return 1;
                end
                p = cast(u64@(argv + i*sizeof_PTR), cstr);
                if not p then
                    printf("No input file supplied with -c flag.\n");
                    return 1;
                end
                in_path = p;
            elif cstr_eq("-o", arg) then
                i += 1;
                if out_path then
                    printf("More than one output file not supported.\n");
                    return 1;
                end
                p = cast(u64@(argv + i*sizeof_PTR), cstr);
                if not p then
                    printf("No output file supplied with -o flag.\n");
                    return 1;
                end
                out_path = p;
            elif cstr_eq("-I", arg) then
                i += 1;
                p = cast(u64@(argv + i*sizeof_PTR), cstr);
                if not p then
                    printf("No path supplied with -I flag.\n");
                    return 1;
                end
                include_paths.push(String::new_from_cstr(p));
            elif cstr_eq("-v", arg) then
                verbosity = 1;
            elif cstr_eq("-vv", arg) then
                verbosity = 2;
            elif cstr_eq("-vvv", arg) then
                verbosity = 3;
            elif cstr_eq("-g", arg) then
                debug = 1;
            elif cstr_eq("-ir", arg) then
                do_print_ir = true;
                will_compile = false;
            elif cstr_eq("-ast", arg) then
                do_print_ast = true;
                will_compile = false;
            elif cstr_eq("-experimental", arg) then
                g_Experimental = true;
            elif cstr_eq("-ld", arg) then
                i += 1;
                while i < argc do
                    ld_flags.push(cast(u64@(argv + i*sizeof_PTR), cstr));
                    i += 1;
                end
            end
            i += 1;
        end

        if not in_path then
            printf("No input file.\n");
            return 1;
        end
        if not out_path and will_compile then
            printf("No output path.\n");
            return 1;
        end

        var source_dir = getcwd();
        source_dir.push('/');
        source_dir.append_cstr(in_path);
        var abspath = source_dir.duplicate();
        while source_dir.length > 0 and source_dir.back() != '/' do
            source_dir.pop();
        end
        if source_dir.length > 1 then
            source_dir.pop();
        end
        include_paths.push(source_dir);

        var starttime = make_empty_timespec();
        var endtime = make_empty_timespec();

        // Compilation phases are as follows:
        // 1) lex source code into tokens and resolve directives
        // 2) parse source code into Abstract Syntax Tree (AST)
        // 3) instantiate generic types
        // 4) calculate struct sizes
        // 5) calculate all code reachable from `main`
        // 6) type infer only reachable code
        // 7) type check only reachable code
        // 8) AST rewriting: inlining, defer generation, etc.
        // 9) lower AST into Intermediate Representation (IR)
        // 10) optimizations
        // 11) emit target architecture from final IR

        time(starttime);
        ////////////////////////////////////////////////////////////////////////////////////////////
        // 1) lex source code
        var tokens = lex_file(abspath.cstr(), include_paths);
        if not tokens then
            return 1;
        end
        var token_stream = TokenStream::new(tokens);
        time(endtime);
        if verbosity > 0 then
            print_timespan("Lexing took: ", starttime, endtime);
        end

        ////////////////////////////////////////////////////////////////////////////////////////////
        // 2) parse tokens into AST
        time(starttime);
        var type_table = make_type_table();
        g_TypeTable = type_table;
        var symbol_table = make_symbol_table();
        g_SymbolTable = symbol_table;
        st_push_scope(symbol_table);
        var roots = parse(token_stream, symbol_table, type_table);
        st_pop_scope(symbol_table);
        assert(st_depth(symbol_table) == 0, "Compiler bug: Didn't pop symbol table scope somewhere.\n");
        time(endtime);
        if verbosity > 0 then
            print_timespan("Parsing took: ", starttime, endtime);
        end

        ////////////////////////////////////////////////////////////////////////////////////////////
        // 3) instantiate types
        time(starttime);
        tt_instantiate_types(type_table);

        ////////////////////////////////////////////////////////////////////////////////////////////
        // 4) calculate struct size
        tt_calculate_structs(type_table);

        ////////////////////////////////////////////////////////////////////////////////////////////
        // 5) calculate code reachable from "main"
        type_infer(type_table, symbol_table, roots, false);
        var compile_order = compile_order_main(roots, type_table, symbol_table);
        if not compile_order then
            printf("ERROR: no `main` procedure.\n");
            return 1;
        end

        ////////////////////////////////////////////////////////////////////////////////////////////
        // 6) type inference
        type_infer(type_table, symbol_table, compile_order, true);
        time(endtime);
        if verbosity > 0 then
            print_timespan("Type inference took: ", starttime, endtime);
        end

        time(starttime);
        ////////////////////////////////////////////////////////////////////////////////////////////
        // 7) type checking
        type_check(type_table, symbol_table, compile_order);
        time(endtime);
        if verbosity > 0 then
            print_timespan("Type checking took: ", starttime, endtime);
        end

        if do_print_ast then
            print_whole_ast(compile_order);
        end

        if g_Errors != 0 then
            printf("Too many errors to continue.\n");
            return 1;
        end

        ////////////////////////////////////////////////////////////////////////////////////////////
        // 8) TODO: AST rewriting

        time(starttime);
        ////////////////////////////////////////////////////////////////////////////////////////////
        // 9) low AST into IR
        if g_Experimental then
            ir_v2(symbol_table, type_table, compile_order);
        else
            var irctx = make_ir_context();
            ir_compile_roots(irctx, roots, symbol_table, type_table, compile_order);
            time(endtime);
            if verbosity > 0 then
                print_timespan("IR compile took: ", starttime, endtime);
            end

            if do_print_ir then
                ir_print_whole_ir(irctx);
            end

            if not will_compile then
                return 0;
            end

            var main_def = NULL;
            var exit_def = NULL;
            if ir_is_label(irctx, "_def_main") then
                main_def = "_def_main";
            else
                printf("ERROR: no `main` procedure.\n");
                return 1;
            end
            if ir_is_label(irctx, "_def_exit") then
                exit_def = "_def_exit";
            end

            ////////////////////////////////////////////////////////////////////////////////////////////
            // 10) TODO optimizations

            time(starttime);
            ////////////////////////////////////////////////////////////////////////////////////////////
            // 11) Generate target arch from IR
            var cctx = make_compiler_context(debug);
            cc_out(cctx, ".text");
            cc_out_files(irctx, cctx);
            cc_out_instructions(irctx, cctx);
            cc_out_start(cctx, main_def, exit_def);
            cc_out_externs(irctx, cctx);
            cc_out_data_section(irctx, cctx);
            time(endtime);
            if verbosity > 0 then
                print_timespan("ASM compile took: ", starttime, endtime);
            end

            time(starttime);
            var out_asm_path = String::new_from_cstr(out_path);
            out_asm_path.append_cstr(".s");
            var out_obj_path = String::new_from_cstr(out_path);
            out_obj_path.append_cstr(".o");
            cc_lines_to_file(cctx, out_asm_path.cstr());
            assemble_and_link(out_asm_path.cstr(), out_obj_path.cstr(), out_path, ld_flags);
            out_asm_path.delete();
            out_obj_path.delete();
            time(endtime);
            if verbosity > 0 then
                print_timespan("Assemble and Link took: ", starttime, endtime);
            end
        end

        time(true_endtime);
        if verbosity > 0 then
            print_timespan("Total elapsed: ", true_starttime, true_endtime);
        end
        return 0;
    end
end
