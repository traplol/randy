
struct TypeCheck in
    current_def_name: cstr;
    current_def_type: Type&;
end

def make_type_check -> TypeCheck& in
    var self = cast(calloc(1, __sizeof(TypeCheck)), TypeCheck&);
    return self;
end

def free_type_check self: TypeCheck& in
    free(self);
end

def _tc_check_ident_type tt, lhs_sym, rhs_expr, ast in
    var sym_type = symbol_type(lhs_sym);
    if not sym_type or sym_type == tt_any_type(tt) then
        printf("ERROR: Type of `%s` could not be inferred.\n", symbol_name(lhs_sym));
        print_ast_src_loc(ast);
        g_Errors += 1;
    end

    var rhs_type = tt_get_ast_type(tt, rhs_expr);
    if not rhs_type or rhs_type == tt_any_type(tt) then
        printf("ERROR: Type of assignment to `%s` could not be inferred.\n", symbol_name(lhs_sym));
        print_ast_src_loc(ast);
        g_Errors += 1;
    end

    if not types_assignable(tt, sym_type, rhs_type) then
        printf("ERROR: The type of `%s` is `", symbol_name(lhs_sym));
        tt_print_type_name(tt, sym_type);
        printf("` which is not assignable by `");
        tt_print_type_name(tt, rhs_type);
        printf(".`\n");
        print_ast_src_loc(ast);
        g_Errors += 1;
    end
end

def _tc_check_is_scalar_type tt, ast, type in
    if type_is_scalar(type) then
        return;
    end
    printf("ERROR: used type `");
    tt_print_type_name(tt, type);
    printf("` where scalar is required.\n");
    print_ast_src_loc(ast);
    g_Errors += 1;
end

def _tc_check_ident_has_type st, ident, ast in
    var sym = st_get_symbol(st, ident);
    var type = symbol_type(sym);
    if not type or type_size(type) == 0 then
        printf("ERROR: type of `%s` is undefined.\n", ident);
        print_ast_src_loc(ast);
        g_Errors += 1;
    end
end

def _tc_check_is_int_like tt, ast, type in
    if type_is_int_like(type) then
        return;
    end
    printf("ERROR: used type `");
    tt_print_type_name(tt, type);
    printf("` where `int`-like is required.\n");
    print_ast_src_loc(ast);
    g_Errors += 1;
end

def tc_check_body self, tt, st, body in
    var i = 0; var len = body.length;
    while i < len do
        var ast = body.get(i);
        tc_check(self, tt, st, ast);
        if ast_kind(ast) == AstK::Return then
            break;
        end
        i += 1;
    end
end

def tc_check_ident self, tt, st, ast in
    check_ast_kind(AstK::Ident, ast);
    _tc_check_ident_has_type(st, ast_ident(ast), ast);
end

def tc_check_call self, tt, st, ast in
    check_ast_kind(AstK::Call, ast);
    tc_check(self, tt, st, ast_expr(ast));
    var call_type = tt_get_ast_type(tt, ast_expr(ast));
    assert(call_type);
    if not type_is_def(call_type) then
        if ast_kind(ast_expr(ast)) == AstK::Ident then
            printf("ERROR: `%s` which has type `", ast_ident(ast_expr(ast)));
        else
            printf("ERROR: type `");
        end
        tt_print_type_name(tt, call_type);
        printf("` is not a callable object.\n");
        printf("NOTE: The expression is: ");
        print_ast(ast);
        print_ast_src_loc(ast);
        g_Errors += 1;
        return;
    end

    var param_types = type_def_parameters(call_type);
    var args = ast_args(ast);
    var i = 0; var len = min(param_types.length, args.length);
    while i < len do
        var arg = args.get(i);
        tc_check(self, tt, st, arg);
        var param_type = param_types.get(i);
        assert(param_type);
        var arg_type = tt_get_ast_type(tt, arg);
        if not arg_type then
            print_ast(arg);
            print_ast_src_loc(ast);
        end
        assert(arg_type);
        if not types_assignable(tt, param_type, arg_type) then
            printf("ERROR: Type mismatch for argument %d: ", i);
            print_ast(ast);
            printf("NOTE: The expected type is `");
            tt_print_type_name(tt, param_type);
            printf("` but got `");
            tt_print_type_name(tt, arg_type);
            printf(".`\n");
            print_ast_src_loc(ast);
            g_Errors += 1;
        end
        i += 1;
    end

    len = args.length;
    while i < len do
        tc_check(self, tt, st, args.get(i));
        i += 1;
    end

    if (i < param_types.length) or (i > param_types.length and not type_def_varargs(call_type)) then
        var expr = ast_expr(ast);
        if ast_kind(expr) == AstK::Ident then
            printf("ERROR: call to `%s` expects %d arguments but got %d.\n",
                ast_ident(expr),
                param_types.length,
                args.length);
        elif ast_kind(expr) == AstK::ScopeResolve then
            printf("ERROR: call to `");
            _print_ast_scope_resolve(expr, 0);
            printf("` expects %d arguments but got %d.\n", param_types.length, args.length);
        else
            printf("ERROR: call expects %d arguments but got %d.\n",
                param_types.length,
                args.length);
        end
        print_ast_src_loc(ast);
        g_Errors += 1;
    end
end

def tc_check_binop self, tt, st, ast in
    check_ast_kind(AstK::BinOp, ast);
    tc_check(self, tt, st, ast_lhs(ast));
    tc_check(self, tt, st, ast_rhs(ast));
end

def tc_check_return self, tt, st, ast in
    check_ast_kind(AstK::Return, ast);
    assert(self.current_def_type);
    var return_type = type_def_return_type(self.current_def_type);
    var expr = ast_expr(ast);
    if expr then
        tc_check(self, tt, st, expr);
        var expr_type = tt_get_ast_type(tt, expr);
        assert(expr_type);
        if not types_assignable(tt, return_type, expr_type) then
            printf("ERROR: Return type for `%s` is `", self.current_def_name);
            tt_print_type_name(tt, return_type);
            printf("` cannot return `");
            tt_print_type_name(tt, expr_type);
            printf(".`\nNOTE: The expression is: ");
            print_ast(ast);
            print_token_loc(ast_token(ast));
            g_Errors += 1;
        end
    elif return_type != tt_void_type(tt) then
        printf("ERROR: Return type for `%s` is `", self.current_def_name);
        tt_print_type_name(tt, return_type);
        printf("` cannot return `void.`\n");
        printf("NOTE: The expression is: ");
        print_ast(ast);
        print_token_loc(ast_token(ast));
        g_Errors += 1;
    end
end

def tc_check_var_decl self, tt, st, ast in
    check_ast_kind(AstK::VarDecl, ast);
    _tc_check_ident_has_type(st, ast_ident(ast), ast);
end

def tc_check_var_assign self, tt, st, ast in
    check_ast_kind(AstK::VarAssign, ast);
    var expr = ast_assign_expr(ast);
    tc_check(self, tt, st, expr);
    var sym = st_get_symbol(st, ast_ident(ast));
    assert(sym);
    _tc_check_ident_type(tt, sym, expr, ast);
end

def tc_check_assign_op self, tt, st, ast in
    check_ast_kind(AstK::AssignOp, ast);
    var lhs_sym = st_get_symbol(st, ast_ident(ast));
    assert(lhs_sym);

    var op = ast_op(ast);
    if op == TK::Assign then
        var expr = ast_assign_expr(ast);
        tc_check(self, tt, st, expr);
        _tc_check_ident_type(tt, lhs_sym, expr, ast);
    else
        var lhs_type = symbol_type(lhs_sym);
        if not lhs_type or lhs_type == tt_any_type(tt) then
            printf("ERROR: Type of `%s` could not be inferred.\n", symbol_name(lhs_sym));
            print_ast_src_loc(ast);
            g_Errors += 1;
        end

        var rhs_type = tt_get_ast_type(tt, ast_assign_expr(ast));
        if not rhs_type or rhs_type == tt_any_type(tt) then
            printf("ERROR: Type of assignment to `%s` could not be inferred.\n", symbol_name(lhs_sym));
            print_ast_src_loc(ast);
            g_Errors += 1;
        end

        if op == TK::PlusEq and type_is_reference(lhs_type) and type_is_int_like(rhs_type) then
            return; // reference += int_like
        elif op == TK::MinusEq and type_is_reference(lhs_type) and type_is_int_like(rhs_type) then
            return; // reference -= int_like
        elif types_assignable(tt, lhs_type, rhs_type) then
            return; // TODO: Verify this is correct behaviour.
        end

        printf("ERROR: The type of `%s` is `", symbol_name(lhs_sym));
        tt_print_type_name(tt, lhs_type);
        printf("` which is not assignable by `");
        tt_print_type_name(tt, rhs_type);
        printf(".`\n");
        print_ast_src_loc(ast);
        g_Errors += 1;
    end
end

def tc_check_def self, tt, st, ast in
    check_ast_kind(AstK::Def, ast);
    var params = ast_params(ast);
    var i = 0; var len = params.length;
    var any = tt_any_type(tt);
    var errors = Vector[Symbol&]::new(0);
    while i < len do
        var param = params.get(i);
        var param_sym = st_get_symbol(st, param);
        assert(param_sym);
        var param_type = symbol_type(param_sym);
        if not param_type or type_size(param_type) == 0 then
            errors.push(param_sym);
        end
        i += 1;
    end
    if errors.length > 0 then
        printf("ERROR: in def `%s`: \n", ast_ident(ast));
        i = 0; len = errors.length;
        while i < len do
            var sym = errors.get(i);
            var type = symbol_type(sym);
            printf("ERROR: `%s` has type `", symbol_name(sym));
            tt_print_type_name(tt, type);
            printf(".`\n");
            i += 1;
        end
        print_ast_src_loc(ast);
        g_Errors += 1;
    end
    var sym = st_get_symbol(st, ast_ident(ast));
    assert(sym);

    self.current_def_name = symbol_name(sym);
    self.current_def_type = symbol_type(sym);

    tc_check_body(self, tt, st, ast_body(ast));

    self.current_def_type = NULL;
    self.current_def_name = NULL;
end

def tc_check_if_else self, tt, st, ast in
    check_ast_kind(AstK::IfElse, ast);
    tc_check(self, tt, st, ast_test(ast));
    tc_check_body(self, tt, st, ast_consequence(ast));
    tc_check_body(self, tt, st, ast_alternative(ast));

    var test_type = tt_get_ast_type(tt, ast_test(ast));
    assert(test_type);
    _tc_check_is_scalar_type(tt, ast_test(ast), test_type);
end

def tc_check_while self, tt, st, ast in
    check_ast_kind(AstK::While, ast);
    tc_check(self, tt, st, ast_test(ast));
    tc_check_body(self, tt, st, ast_body(ast));

    var test_type = tt_get_ast_type(tt, ast_test(ast));
    assert(test_type);
    _tc_check_is_scalar_type(tt, ast_test(ast), test_type);
end

def tc_check_pointer_read self, tt, st, ast in
    check_ast_kind(AstK::PointerRead, ast);
    var pop_args = ast_pop_args(ast);
    tc_check(self, tt, st, pop_args.get(0));
end

def tc_check_pointer_write self, tt, st, ast in
    check_ast_kind(AstK::PointerWrite, ast);
    var pop_args = ast_pop_args(ast);
    tc_check(self, tt, st, pop_args.get(0));
    tc_check(self, tt, st, pop_args.get(1));
end

def tc_check_prefix_op self, tt, st, ast in
    check_ast_kind(AstK::Prefix, ast);
    tc_check(self, tt, st, ast_expr(ast));

    var expr_type = tt_get_ast_type(tt, ast_expr(ast));
    assert(expr_type);

    var op = ast_op(ast);
    if op == TK::KW_not then
        _tc_check_is_scalar_type(tt, ast, expr_type);
    else
        _tc_check_is_int_like(tt, ast, expr_type);
    end
end

def tc_check_const self, tt, st, ast in
    check_ast_kind(AstK::Const, ast);
    var expr = ast_assign_expr(ast);
    tc_check(self, tt, st, expr);
    var sym = st_get_symbol(st, ast_ident(ast));
    assert(sym);
    _tc_check_ident_type(tt, sym, expr, ast);
end

def tc_check_global self, tt, st, ast in
    check_ast_kind(AstK::Global, ast);
    var expr = ast_assign_expr(ast);
    tc_check(self, tt, st, expr);
    var sym = st_get_symbol(st, ast_ident(ast));
    assert(sym);
    _tc_check_ident_type(tt, sym, expr, ast);
end

def tc_check_cast self, tt, st, ast in
    check_ast_kind(AstK::Cast, ast);
    tc_check(self, tt, st, ast_expr(ast));
end

def tc_check_member_access self, tt, st, ast in
    // field resolution happened in type inference so not much needed to check here
    check_ast_kind(AstK::MemberAccess, ast);
    var expr = ast_expr(ast);
    var member = ast_member(ast);
    tc_check(self, tt, st, expr);
    var type = tt_get_ast_type(tt, expr);
    if not type or type_size(type) == 0 then
        printf("ERROR: attempting to access member `%s` on undefined type.\n", member);
        printf("NOTE: the expression is:");
        print_ast(ast);
        print_ast_src_loc(ast);
        g_Errors += 1;
        return;
    end

    while type_is_reference(type) do
        type = type_deref_type(type);
    end

    if not type_is_struct(type) and not type_is_union(type) then
        printf("ERROR: attempting to access member `%s` with '.' operator on non-struct type.\n", member);
        printf("NOTE: the expression is:");
        print_ast(ast);
        print_ast_src_loc(ast);
        g_Errors += 1;
        return;
    end

    var found = false;
    var fields;
    if type_is_struct(type) then
        fields = type_struct_fields(type);
    elif type_is_union(type) then
        fields = type_union_fields(type);
    end
    var i = 0; var len = fields.length;
    while i < len do
        var field = fields.get(i);
        if cstr_eq(field.name, member) then
            found = true;
            break;
        end
        i += 1;
    end

    if not found then
        printf("ERROR: type `");
        tt_print_type_name(tt, type);
        printf("` has no member named `%s`.\n", member);
        printf("NOTE: the expression is:");
        print_ast(ast);
        print_ast_src_loc(ast);
        g_Errors += 1;
    end
end

def tc_check_assign_member self, tt, st, ast in
    check_ast_kind(AstK::AssignMember, ast);

    var lhs = ast_lhs(ast);
    var rhs = ast_rhs(ast);
    tc_check(self, tt, st, lhs);
    tc_check(self, tt, st, rhs);

    var op = ast_op(ast);
    var lhs_type = tt_get_ast_type(tt, lhs);
    var rhs_type = tt_get_ast_type(tt, rhs);

    if op == TK::Assign then
        if types_assignable(tt, lhs_type, rhs_type) then
            return;
        end
    elif op == TK::PlusEq and type_is_reference(lhs_type) and type_is_int_like(rhs_type) then
        return; // reference += int_like
    elif op == TK::MinusEq and type_is_reference(lhs_type) and type_is_int_like(rhs_type) then
        return; // reference -= int_like
    elif types_assignable(tt, lhs_type, rhs_type) then
        return; // TODO: Verify this is correct behaviour.
    end

    printf("ERROR: the type of `%s` is `", ast_member(lhs));
    tt_print_type_name(tt, lhs_type);
    printf("` (%d) which is not assignable by `", type_id(lhs_type));
    tt_print_type_name(tt, rhs_type);
    printf(".` (%d)\n", type_id(rhs_type));
    print_ast_src_loc(ast);
    g_Errors += 1;
end

def tc_check_scope_resolve self, tt, st, ast in
    check_ast_kind(AstK::ScopeResolve, ast);
    var type = scope_resolve_lhs(tt, ast_lhs(ast), true);
    if not type then
        return;
    end
    var member = ast_ident(ast_rhs(ast));
    if type_is_enum(type) then
        var enum_vals = type_enum_values(type);
        var i = 0; var len = enum_vals.length;
        while i < len do
            var ev = enum_vals.get(i);
            if cstr_eq(ev.name, member) then
                return; // OK. found enum value
            end
            i += 1;
        end
        printf("ERROR: enum `");
        tt_print_type_name(tt, type);
        printf("` has no value `%s.`\n", member);
        print_ast_src_loc(ast);
        g_Errors += 1;
    elif type_is_struct(type) then
        var fields = type_struct_fields(type);
        var i = 0; var len = fields.length;
        while i < len do
            var field = fields.get(i);
            if cstr_eq(field.name, member) then
                printf("ERROR: cannot directly reference instance field `%s` from struct `");
                tt_print_type_name(tt, type);
                printf("`\n");
                print_ast_src_loc(ast);
                g_Errors += 1;
                return; // OK. found field
            end
            i += 1;
        end

        var defs = type_struct_defs(type);
        i = 0; len = defs.length;
        while i < len do
            var def_sym = defs.get(i);
            if cstr_eq(def_sym.name, member) then
                return; // OK. found def
            end
            i += 1;
        end

        printf("ERROR: struct `");
        tt_print_type_name(tt, type);
        printf("` has no member `%s.`\n", member);
        print_ast_src_loc(ast);
        g_Errors += 1;
    elif type_is_union(type) then
        assert(false, "TODO: scope resolution operator for unions\n");
    else
        printf("ERROR: type `");
        tt_print_type_name(tt, type);
        printf("` is not a struct, enum, or union.\n", member);
        print_ast_src_loc(ast);
        g_Errors += 1;
    end
end

def tc_check_sizeof_expr self, tt, st, ast in
    check_ast_kind(AstK::SizeofExpr, ast);
end

def tc_check_sizeof_type self, tt, st, ast in
    check_ast_kind(AstK::SizeofType, ast);
    var type = ast_type(ast);
    if not type then
        var expr = ast_expr(ast);
        if expr and ast_kind(expr) == AstK::Ident then
            printf("ERROR: __sizeof undefined type `%s`\n", ast_ident(expr));
        else
            printf("ERROR: __sizeof undefined type\n");
        end
        print_ast_src_loc(ast);
        g_Errors += 1;
    end
end

def tc_check_offset_of self, tt, st, ast in
    check_ast_kind(AstK::OffsetOf, ast);
end

def tc_check_static_assert self, tt, st, ast in
    check_ast_kind(AstK::StaticAssert, ast);
    var args = ast_args(ast);
    if args.length != 2 then
        printf("ERROR: 'static_assert' expects exactly two arguments, a test, and a message\n");
        print_ast_src_loc(ast);
        g_Errors += 1;
    end

    var arg0_type = tt_get_ast_type(tt, args.get(0));
    if not type_is_scalar(arg0_type) then
        printf("ERROR: the first argument to 'static_assert' must be a scalar value\n");
        print_ast_src_loc(args.get(0));
        g_Errors += 1;
    end

    var arg1_type = tt_get_ast_type(tt, args.get(1));
    if not types_eq(arg1_type, tt_cstr_type(tt)) then
        printf("ERROR: the second argument to 'static_assert' must be a cstr value\n");
        print_ast_src_loc(args.get(1));
        g_Errors += 1;
    end
end

def tc_check self, tt, st, ast in
    var k = ast_kind(ast);
    if k == AstK::Ident then tc_check_ident(self, tt, st, ast);
    elif k == AstK::Integer then // nothing
    elif k == AstK::String then //nothing
    elif k == AstK::Call then tc_check_call(self, tt, st, ast);
    elif k == AstK::BinOp then tc_check_binop(self, tt, st, ast);
    elif k == AstK::Return then tc_check_return(self, tt, st, ast);
    elif k == AstK::VarDecl then tc_check_var_decl(self, tt, st, ast);
    elif k == AstK::VarAssign then tc_check_var_assign(self, tt, st, ast);
    elif k == AstK::Def then tc_check_def(self, tt, st, ast);
    elif k == AstK::IfElse then tc_check_if_else(self, tt, st, ast);
    elif k == AstK::While then tc_check_while(self, tt, st, ast);
    elif k == AstK::PointerRead then tc_check_pointer_read(self, tt, st, ast);
    elif k == AstK::PointerWrite then tc_check_pointer_write(self, tt, st, ast);
    elif k == AstK::Prefix then tc_check_prefix_op(self, tt, st, ast);
    elif k == AstK::Const then tc_check_const(self, tt, st, ast);
    elif k == AstK::Extern then // nothing
    elif k == AstK::InlineAsm then // nothing
    elif k == AstK::Global then tc_check_global(self, tt, st, ast);
    elif k == AstK::Break then // nothing
    elif k == AstK::Continue then // nothing
    elif k == AstK::AssignOp then tc_check_assign_op(self, tt, st, ast);
    elif k == AstK::Struct then // nothing
    elif k == AstK::Cast then tc_check_cast(self, tt, st, ast);
    elif k == AstK::MemberAccess then tc_check_member_access(self, tt, st, ast);
    elif k == AstK::AssignMember then tc_check_assign_member(self, tt, st, ast);
    elif k == AstK::SizeofExpr then tc_check_sizeof_expr(self, tt, st, ast);
    elif k == AstK::SizeofType then tc_check_sizeof_type(self, tt, st, ast);
    elif k == AstK::Enum then // nothing
    elif k == AstK::Type then // nothing
    elif k == AstK::ScopeResolve then tc_check_scope_resolve(self, tt, st, ast);
    elif k == AstK::GetReference then // nothing
    elif k == AstK::Union then // nothing
    elif k == AstK::StaticAssert then tc_check_static_assert(self, tt, st, ast);
    elif k == AstK::OffsetOf then tc_check_offset_of(self, tt, st, ast);
    else
        printf("  File \"%s\", line %d\n", __FILE__, __LINE__);
        printf("Unhandled AstK: %s (%d)\n", ast_kind_cstr(k), k);
        print_ast(ast);
        print_ast_src_loc(ast);
        exit(1);
    end
end

def type_check type_table, symbol_table, compile_order: Vector[ast]& in
    var type_checker = make_type_check();
    var i = 0; var len = compile_order.length;
    while i < len do
        tc_check(type_checker, type_table, symbol_table, compile_order.get(i));
        i += 1;
    end
    free_type_check(type_checker);
end
