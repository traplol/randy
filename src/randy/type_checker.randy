

proc tc_check_body self, body in
    var i = 0; var len = vector_len(body);
    while i < len do
        var ast = vector_get(body, i);
        tc_check(self, ast);
        if ast_kind(ast) == AstK_Return then
            break;
        end
        i += 1;
    end
end

proc tc_check_ident self, ast in
    check_ast_kind(AstK_Ident, ast);
    var found = tc_find_ident(self, ast_ident(ast));
    if found then
        return map_pair_val(found);
    else
        tc_add_resolve_later(self, ast);
        return tc_any_type(self);
    end
end

proc tc_check_integer self, ast in
    check_ast_kind(AstK_Integer, ast);
    return tc_get_type(self, "int");
end

proc tc_check_string self, ast in
    check_ast_kind(AstK_String, ast);
    return tc_get_type(self, "cstr");
end

proc tc_check_call self, ast in
    check_ast_kind(AstK_Call, ast);
    var args = ast_args(ast);
    var i = 0; var len = vector_len(args);
    while i < len do
        tc_check(self, vector_get(args, i));
        i += 1;
    end
    tc_check(self, ast_expr(ast));
    return tc_any_type(self);
end

proc tc_check_binop self, ast in
    check_ast_kind(AstK_BinOp, ast);
    var lhs = tc_check(self, ast_lhs(ast));
    var rhs = tc_check(self, ast_rhs(ast));
    var any = tc_any_type(self);
    var int = tc_int_type(self);
    // var ptr = tc_ptr_type(self);
    if lhs == any and rhs == any then
        tc_set_ast_type(self, ast_lhs(ast), int);
        tc_set_ast_type(self, ast_rhs(ast), int);
        return int;
    else if lhs == rhs then
        return lhs;
    else if lhs == any and rhs == int then
        tc_set_ast_type(self, ast_lhs(ast), int);
        return int;
    else if lhs == int and rhs == any then
        tc_set_ast_type(self, ast_rhs(ast), int);
        return int;
    end
    return tc_any_type(self);
end

proc tc_check_return self, ast in
    check_ast_kind(AstK_Return, ast);
    var type;
    if ast_expr(ast) then
        type = tc_check(self, ast_expr(ast));
    else
        type = tc_void_type(self);
    end
    var cur_proc = tc_cur_proc(self);
    var otype = proc_type_info_return_type(cur_proc);
    if otype != tc_any_type(self) and otype != type then
        printf("WARN: Changing procedure return type.\n");
        printf("NOTE: The expression is: ");
        print_ast(ast);
        printf("NOTE: The old type was: ");
        print_type(otype);
        printf("NOTE: The new type is: ");
        print_type(type);
        tc_print_src_loc(self);
    end
    tc_set_did_return(self, true);
    proc_type_info_set_return_type(cur_proc, type);
    return tc_void_type(self);
end

proc tc_check_var_decl self, ast in
    check_ast_kind(AstK_VarDecl, ast);
    tc_set_local_ident_type(self, ast_ident(ast), tc_any_type(self));
    return tc_void_type(self);
end

proc tc_check_var_assign self, ast in
    check_ast_kind(AstK_VarAssign, ast);
    var type = tc_check(self, ast_assign_expr(ast));
    tc_set_local_ident_type(self, ast_ident(ast), type);
    return tc_void_type(self);
end

proc tc_check_assign self, ast in
    check_ast_kind(AstK_Assign, ast);
    var type = tc_check(self, ast_assign_expr(ast));
    tc_set_ident_type(self, ast_ident(ast), type);
    return tc_void_type(self);
end

proc tc_check_procedure self, ast in
    check_ast_kind(AstK_Procedure, ast);
    tc_push_scope(self);
    var params = ast_params(ast);
    var len = vector_len(params);
    var param_types = make_vector(len);
    var i = 0;
    var any = tc_any_type(self);
    while i < len do
        vector_push(param_types, any);
        tc_set_local_ident_type(self, vector_get(params, i), any);
        i += 1;
    end
    var proc_type_info = make_proc_type_info(any, param_types);
    tc_set_cur_proc(self, proc_type_info);
    tc_set_did_return(self, false);
    tc_add_proc(self, ast_ident(ast), proc_type_info);

    tc_check_body(self, ast_body(ast));

    if not tc_did_return(self) then
        proc_type_info_set_return_type(proc_type_info, tc_void_type(self));
    end

    tc_pop_scope(self);
    return tc_void_type(self);
end

proc tc_check_if_else self, ast in
    check_ast_kind(AstK_IfElse, ast);
    tc_check(self, ast_test(ast));
    tc_check_body(self, ast_consequence(ast));
    tc_check_body(self, ast_alternative(ast));
    return tc_void_type(self);
end

proc tc_check_while self, ast in
    check_ast_kind(AstK_While, ast);
    tc_check(self, ast_test(ast));
    tc_check_body(self, ast_body(ast));
    return tc_void_type(self);
end

proc tc_check_pointer_read self, ast in
    check_ast_kind(AstK_PointerRead, ast);
    var args = ast_pop_args(ast);
    var i = 0; var len = vector_len(args);
    while i < len do
        tc_check(self, vector_get(args, i));
        i += 1;
    end
    return tc_any_type(self);
end

proc tc_check_pointer_write self, ast in
    check_ast_kind(AstK_PointerWrite, ast);
    var args = ast_pop_args(ast);
    var i = 0; var len = vector_len(args);
    while i < len do
        tc_check(self, vector_get(args, i));
        i += 1;
    end
    return tc_void_type(self);
end

proc tc_check_prefix_op self, ast in
    check_ast_kind(AstK_Prefix, ast);
    return tc_check(self, ast_expr(ast));
end

proc tc_check_const self, ast in
    check_ast_kind(AstK_Const, ast);
    var type = tc_check(self, ast_assign_expr(ast));
    tc_set_ident_type(self, ast_ident(ast), type);
    return tc_void_type(self);
end

proc tc_check_extern self, ast in
    check_ast_kind(AstK_Extern, ast);
    return tc_void_type(self);
end

proc tc_check_inline_asm self, ast in
    check_ast_kind(AstK_InlineAsm, ast);
    return tc_void_type(self);
end

proc tc_check_global self, ast in
    check_ast_kind(AstK_Global, ast);
    var type = tc_check(self, ast_assign_expr(ast));
    tc_set_ident_type(self, ast_ident(ast), type);
    return tc_void_type(self);
end

proc tc_check self, ast in
    var k = ast_kind(ast);
    vector_push(tc_src_locs(self), token_src_loc(ast_token(ast)));
    var type;
    if k == AstK_Ident then type = tc_check_ident(self, ast);
    else if k == AstK_Integer then type = tc_check_integer(self, ast);
    else if k == AstK_String then type = tc_check_string(self, ast);
    else if k == AstK_Call then type = tc_check_call(self, ast);
    else if k == AstK_BinOp then type = tc_check_binop(self, ast);
    else if k == AstK_Return then type = tc_check_return(self, ast);
    else if k == AstK_VarDecl then type = tc_check_var_decl(self, ast);
    else if k == AstK_VarAssign then type = tc_check_var_assign(self, ast);
    else if k == AstK_Assign then type = tc_check_assign(self, ast);
    else if k == AstK_Procedure then type = tc_check_procedure(self, ast);
    else if k == AstK_IfElse then type = tc_check_if_else(self, ast);
    else if k == AstK_While then type = tc_check_while(self, ast);
    else if k == AstK_PointerRead then type = tc_check_pointer_read(self, ast);
    else if k == AstK_PointerWrite then type = tc_check_pointer_write(self, ast);
    else if k == AstK_Prefix then type = tc_check_prefix_op(self, ast);
    else if k == AstK_Const then type = tc_check_const(self, ast);
    else if k == AstK_Extern then type = tc_check_extern(self, ast);
    else if k == AstK_InlineAsm then type = tc_check_inline_asm(self, ast);
    else if k == AstK_Global then type = tc_check_global(self, ast);
    else if k == AstK_Break then type = tc_void_type(self);
    else if k == AstK_Continue then type = tc_void_type(self);
    else
        printf("`tc_check` in typechecking.randy");
        printf("Unhandled AstK: %d\n", k);
        print_token(ast_token(ast));
        print_token_loc(ast_token(ast));
        exit(1);
    end
    tc_set_ast_type(self, ast, type);
    vector_pop(tc_src_locs(self));
    return type;
end

proc typecheck self, roots, sym_table in
    var t;
    tc_push_scope(self);

    t = make_type("any", 0, false); // temporary "black hole" type, matches anything
    u64!(self + TTYPE_CHECK_any_type, t);
    tc_add_type(self, t);

    t = make_type("void", 0, false); // only usable for proc return types
    u64!(self + TTYPE_CHECK_void_type, t);
    tc_add_type(self, t);

    t = make_type("int", 8, false);
    u64!(self + TTYPE_CHECK_int_type, t);
    tc_add_type(self, t);

    t = make_type("ptr", 8, true);
    u64!(self + TTYPE_CHECK_ptr_type, t);
    tc_add_type(self, t);

    t = make_type("cstr", 8, true);
    u64!(self + TTYPE_CHECK_cstr_type, t);
    tc_add_type(self, t);

    var i = 0; var len = vector_len(roots);
    while i < len do
        tc_check(self, vector_get(roots, i));
        i += 1;
    end

    // var set = tc_resolve_later(self);
    // var cur = set_begin(set);
    // while cur != set_end(set) do
    //     printf(">>> %p: ", u64@(cur)); print_ast(u64@(cur));
    //     cur = set_next(set, cur);
    // end
end

proc tc_print_types self in
    // var cur; var map;

    // map = tc_ast_types(self);
    // cur = map_begin(map);
    // while cur != map_end(map) do
    //     printf("===========\n");
    //     printf("%p: ", map_pair_key(cur)); print_ast(map_pair_key(cur));
    //     print_type(map_pair_val(cur));
    //     cur = map_next(map, cur);
    // end

    // printf("~~~~~~~~~~~~\n");

    // map = tc_procs(self);
    // cur = map_begin(map);
    // while cur != map_end(map) do
    //     printf("%s: ", map_pair_key(cur));
    //     print_proc_type_info(map_pair_val(cur));
    //     cur = map_next(map, cur);
    // end
        
end
