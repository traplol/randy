
struct TokenStream in
    tokens: Vector[Token&]&;
    idx: int;

    def new tokens: Vector[Token&]& -> TokenStream& in
        var self: TokenStream& = malloc(__sizeof(TokenStream));
        self.tokens = tokens;
        self.idx = 0;
        return self;
    end

    def peek self: TokenStream& -> Token& in
        if self.idx >= self.tokens.length then
            return cast(NULL, Token&);
        end
        return self.tokens.get(self.idx);
    end

    def peekk self: TokenStream&, kind: TK -> bool in
        var peek = self.peek();
        if not peek then
            return false;
        end
        return peek.kind == kind;
    end

    def peekk_one_of self: TokenStream&, tk: TK, ...tks in
        var peek = self.peek();
        if not peek then
            return false;
        end
        var k = peek.kind;
        if tk == k then
            return true;
        end
        var i = 0;
        while i < tks.length do
            if tks.get(i) == k then
                return true;
            end
            i += 1;
        end
        return false;
    end

    def next self: TokenStream& -> Token& in
        var peek = self.peek();
        self.idx += 1;
        return peek;
    end

    def accept self: TokenStream&, kind: TK -> Token& in
        var tmp = self.peek();
        if tmp and tmp.kind == kind then
            return self.next();
        end
        return cast(NULL, Token&);
    end

    def expect self: TokenStream&, kind: TK -> Token& in
        var tmp = self.peek();
        if not tmp then
            printf("ERROR: Expected token kind %s but ran out of tokens.\n", token_kind_cstr(kind));
            exit(1);
        end
        var tmp_k = tmp.kind;
        if tmp_k != kind then
            printf("ERROR: Expected token kind %s (%d), got %s\n",
            token_kind_cstr(kind),
            kind,
            token_kind_cstr(tmp_k));
            print_token_loc(tmp);
            exit(1);
        end
        self.next();
        return tmp;
    end

    def peekk2 self: TokenStream&, kind1: TK, kind2: TK -> bool in
        var peek = self.peek();
        if not peek then
            return false;
        end

        var idx = self.idx;
        var good = false;
        if self.accept(kind1) then
            if self.accept(kind2) then
                good = true;
            end
        end
        self.idx = idx;
        return good;
    end
end
