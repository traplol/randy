
// Token Kinds
const TK_Integer     = 0;
const TK_String      = 1;
const TK_Char        = 2;
const TK_Ident       = 3;
const TK_KW_proc     = 4;
const TK_KW_do       = 5;
const TK_KW_var      = 6;
const TK_KW_in       = 7;
const TK_KW_if       = 8;
const TK_KW_else     = 9;
const TK_KW_then     = 10;
const TK_KW_end      = 11;
const TK_KW_while    = 12;
const TK_KW_return   = 13;
const TK_KW_and      = 14;
const TK_KW_or       = 15;
const TK_KW_not      = 16;
const TK_KW_u8@      = 17;
const TK_KW_u16@     = 18;
const TK_KW_u32@     = 19;
const TK_KW_u64@     = 20;
const TK_KW_u8!      = 21;
const TK_KW_u16!     = 22;
const TK_KW_u32!     = 23;
const TK_KW_u64!     = 24;
const TK_KW_const    = 25;
const TK_KW_extern   = 26;
const TK_KW_asm      = 27;
const TK_Plus        = 28;
const TK_Minus       = 29;
const TK_Star        = 30;
const TK_Slash       = 31;
const TK_Percent     = 32;
const TK_Semicolon   = 33;
const TK_Less        = 34;
const TK_LessEq      = 35;
const TK_Greater     = 36;
const TK_GreaterEq   = 37;
const TK_Assign      = 38;
const TK_EqEq        = 39;
const TK_NotEq       = 40;
const TK_Tilde       = 41;
const TK_Comma       = 42;
const TK_LParen      = 43;
const TK_RParen      = 44;
const TK_Bar         = 45;
const TK_Amper       = 46;
const TK_Caret       = 47;
const TK_Ellipsis    = 48;
const TK_KW_global   = 49;
const TK_KW_break    = 50;
const TK_KW_continue = 51;
const TK_LShift      = 52;
const TK_RShift      = 53;
const TK_Colon       = 54;
const TK_RightArrow  = 55;
const TK_PlusEq      = 56;
const TK_MinusEq     = 57;
const TK_StarEq      = 58;
const TK_SlashEq     = 59;
const TK_PercentEq   = 60;
const TK_LShiftEq    = 61;
const TK_RShiftEq    = 62;
const TK_AmperEq     = 63;
const TK_CaretEq     = 64;
const TK_BarEq       = 65;
const TK_LSquare     = 66;
const TK_RSquare     = 67;
const TK_KW_cast     = 68;
const TK_KW_struct   = 69;
const TK_KW_union    = 70;
const TK_KW_enum     = 71;
const TK_KW_inline   = 72;
const TK_Dot         = 73;
const TK_KW_assert   = 74;
const TK_KW_elif     = 75;

proc token_kind_cstr k: int -> cstr in
    if k == TK_Integer then return "TK_Integer";
    elif k == TK_String then return "TK_String";
    elif k == TK_Char then return "TK_Char";
    elif k == TK_Ident then return "TK_Ident";
    elif k == TK_KW_proc then return "TK_KW_proc";
    elif k == TK_KW_do then return "TK_KW_do";
    elif k == TK_KW_var then return "TK_KW_var";
    elif k == TK_KW_in then return "TK_KW_in";
    elif k == TK_KW_if then return "TK_KW_if";
    elif k == TK_KW_else then return "TK_KW_else";
    elif k == TK_KW_then then return "TK_KW_then";
    elif k == TK_KW_end then return "TK_KW_end";
    elif k == TK_KW_while then return "TK_KW_while";
    elif k == TK_KW_return then return "TK_KW_return";
    elif k == TK_KW_and then return "TK_KW_and";
    elif k == TK_KW_or then return "TK_KW_or";
    elif k == TK_KW_not then return "TK_KW_not";
    elif k == TK_KW_u8@ then return "TK_KW_u8@";
    elif k == TK_KW_u16@ then return "TK_KW_u16@";
    elif k == TK_KW_u32@ then return "TK_KW_u32@";
    elif k == TK_KW_u64@ then return "TK_KW_u64@";
    elif k == TK_KW_u8! then return "TK_KW_u8!";
    elif k == TK_KW_u16! then return "TK_KW_u16!";
    elif k == TK_KW_u32! then return "TK_KW_u32!";
    elif k == TK_KW_u64! then return "TK_KW_u64!";
    elif k == TK_KW_const then return "TK_KW_const";
    elif k == TK_KW_extern then return "TK_KW_extern";
    elif k == TK_KW_asm then return "TK_KW_asm";
    elif k == TK_Plus then return "TK_Plus";
    elif k == TK_Minus then return "TK_Minus";
    elif k == TK_Star then return "TK_Star";
    elif k == TK_Slash then return "TK_Slash";
    elif k == TK_Percent then return "TK_Percent";
    elif k == TK_Semicolon then return "TK_Semicolon";
    elif k == TK_Less then return "TK_Less";
    elif k == TK_LessEq then return "TK_LessEq";
    elif k == TK_Greater then return "TK_Greater";
    elif k == TK_GreaterEq then return "TK_GreaterEq";
    elif k == TK_Assign then return "TK_Assign";
    elif k == TK_EqEq then return "TK_EqEq";
    elif k == TK_NotEq then return "TK_NotEq";
    elif k == TK_Tilde then return "TK_Tilde";
    elif k == TK_Comma then return "TK_Comma";
    elif k == TK_LParen then return "TK_LParen";
    elif k == TK_RParen then return "TK_RParen";
    elif k == TK_Bar then return "TK_Bar";
    elif k == TK_Amper then return "TK_Amper";
    elif k == TK_Caret then return "TK_Caret";
    elif k == TK_Ellipsis then return "TK_Ellipsis";
    elif k == TK_KW_global then return "TK_KW_global";
    elif k == TK_KW_break then return "TK_KW_break";
    elif k == TK_KW_continue then return "TK_KW_continue";
    elif k == TK_LShift then return "TK_LShift";
    elif k == TK_RShift then return "TK_RShift";
    elif k == TK_Colon then return "TK_Colon";
    elif k == TK_RightArrow then return "TK_RightArrow";
    elif k == TK_PlusEq then return "TK_PlusEq";
    elif k == TK_MinusEq then return "TK_MinusEq";
    elif k == TK_StarEq then return "TK_StarEq";
    elif k == TK_SlashEq then return "TK_SlashEq";
    elif k == TK_PercentEq then return "TK_PercentEq";
    elif k == TK_LShiftEq then return "TK_LShiftEq";
    elif k == TK_RShiftEq then return "TK_RShiftEq";
    elif k == TK_AmperEq then return "TK_AmperEq";
    elif k == TK_CaretEq then return "TK_CaretEq";
    elif k == TK_BarEq then return "TK_BarEq";
    elif k == TK_LSquare then return "TK_LSquare";
    elif k == TK_RSquare then return "TK_RSquare";
    elif k == TK_KW_cast then return "TK_KW_cast";
    elif k == TK_KW_struct then return "TK_KW_struct";
    elif k == TK_KW_union then return "TK_KW_union";
    elif k == TK_KW_enum then return "TK_KW_enum";
    elif k == TK_KW_inline then return "TK_KW_inline";
    elif k == TK_Dot then return "TK_Dot";
    elif k == TK_KW_assert then return "TK_KW_assert";
    elif k == TK_KW_elif then return "TK_KW_elif";
    else return "TK_OUT_OF_RANGE"; end
end

const TTOKEN_kind     = 0;  // TK
const TTOKEN_cstr     = 8;  // cstr
const TTOKEN_value    = 16; // Union(int, cstr)
const TTOKEN_filename = 24; // cstr
const TTOKEN_line     = 32; // int
const sizeof_TTOKEN   = 40;

const TSRC_LOC_filename = 0;
const TSRC_LOC_line     = 8;
const sizeof_TSRC_LOC   = 16;

proc make_token kind: int, cstr: cstr, value: ptr, line: int, filename: cstr -> token in
    var self = malloc(sizeof_TTOKEN);
    u64!(self + TTOKEN_kind, kind);
    u64!(self + TTOKEN_cstr, cstr);
    u64!(self + TTOKEN_value, value);
    u64!(self + TTOKEN_line, line);
    u64!(self + TTOKEN_filename, filename);
    return cast(self, token);
end

proc free_token self: token in
    free(self);
end

proc token_kind self: token in return cast(u64@(self + TTOKEN_kind), int); end
proc token_cstr self: token in return cast(u64@(self + TTOKEN_cstr), cstr); end
proc token_value self: token in return cast(u64@(self + TTOKEN_value), ptr); end
proc token_filename self: token in return cast(u64@(self + TTOKEN_filename), cstr); end
proc token_line self: token in return cast(u64@(self + TTOKEN_line), int); end

proc token_src_loc self: token in return cast(cast(self, ptr) + TTOKEN_filename, src_loc); end
proc src_loc_filename self: src_loc in return cast(u64@(self + TSRC_LOC_filename), cstr); end
proc src_loc_line self: src_loc in return cast(u64@(self + TSRC_LOC_line), int); end

proc print_token self: token in
    var k = token_kind(self);
    printf("token: %s -> '%s' = ", token_kind_cstr(k)
                                 , token_cstr(self));

    var v = token_value(self);
    if k == TK_Integer then
        printf("%d\n", v);
    elif k == TK_String then
        printf("\"%s\"\n", string_cstr(v));
    elif k == TK_Char then
        printf("'%c'\n", v);
    else
        printf("%s\n", v);
    end
end

proc print_src_loc self: src_loc in
    var line_no = src_loc_line(self);
    var filename = src_loc_filename(self);
    printf("  File \"%s\", line %d\n", filename, line_no);
end

proc print_token_loc self: token in
    print_src_loc(token_src_loc(self));
end
