
// Token Kinds
enum TK in
    Integer;
    String;
    Char;
    Ident;
    KW_def;
    KW_do;
    KW_var;
    KW_in;
    KW_if;
    KW_else;
    KW_then;
    KW_end;
    KW_while;
    KW_return;
    KW_and;
    KW_or;
    KW_not;
    KW_u8@;
    KW_u16@;
    KW_u32@;
    KW_u64@;
    KW_u8!;
    KW_u16!;
    KW_u32!;
    KW_u64!;
    KW_u@;
    KW_u!;
    KW_const;
    KW_extern;
    KW_asm;
    KW_global;
    KW_break;
    KW_continue;
    KW_cast;
    KW_struct;
    KW_union;
    KW_enum;
    KW_inline;
    KW_assert;
    KW_static_assert;
    KW_elif;
    KW__FILE__;
    KW__LINE__;
    KW__sizeof;
    KW__offsetof;
    Plus;
    Minus;
    Star;
    Slash;
    Percent;
    Semicolon;
    Less;
    LessEq;
    Greater;
    GreaterEq;
    Assign;
    EqEq;
    NotEq;
    Tilde;
    Comma;
    LParen;
    RParen;
    Bar;
    Amper;
    Caret;
    Ellipsis;
    LShift;
    RShift;
    Colon;
    RightArrow;
    PlusEq;
    MinusEq;
    StarEq;
    SlashEq;
    PercentEq;
    LShiftEq;
    RShiftEq;
    AmperEq;
    CaretEq;
    BarEq;
    LSquare;
    RSquare;
    Dot;
    ColonColon;
end

def token_kind_cstr k: TK -> cstr in
    if k == TK::Integer then return "TK::Integer";
    elif k == TK::String then return "TK::String";
    elif k == TK::Char then return "TK::Char";
    elif k == TK::Ident then return "TK::Ident";
    elif k == TK::KW_def then return "TK::KW_def";
    elif k == TK::KW_do then return "TK::KW_do";
    elif k == TK::KW_var then return "TK::KW_var";
    elif k == TK::KW_in then return "TK::KW_in";
    elif k == TK::KW_if then return "TK::KW_if";
    elif k == TK::KW_else then return "TK::KW_else";
    elif k == TK::KW_then then return "TK::KW_then";
    elif k == TK::KW_end then return "TK::KW_end";
    elif k == TK::KW_while then return "TK::KW_while";
    elif k == TK::KW_return then return "TK::KW_return";
    elif k == TK::KW_and then return "TK::KW_and";
    elif k == TK::KW_or then return "TK::KW_or";
    elif k == TK::KW_not then return "TK::KW_not";
    elif k == TK::KW_u8@ then return "TK::KW_u8@";
    elif k == TK::KW_u16@ then return "TK::KW_u16@";
    elif k == TK::KW_u32@ then return "TK::KW_u32@";
    elif k == TK::KW_u64@ then return "TK::KW_u64@";
    elif k == TK::KW_u8! then return "TK::KW_u8!";
    elif k == TK::KW_u16! then return "TK::KW_u16!";
    elif k == TK::KW_u32! then return "TK::KW_u32!";
    elif k == TK::KW_u64! then return "TK::KW_u64!";
    elif k == TK::KW_const then return "TK::KW_const";
    elif k == TK::KW_extern then return "TK::KW_extern";
    elif k == TK::KW_asm then return "TK::KW_asm";
    elif k == TK::Plus then return "TK::Plus";
    elif k == TK::Minus then return "TK::Minus";
    elif k == TK::Star then return "TK::Star";
    elif k == TK::Slash then return "TK::Slash";
    elif k == TK::Percent then return "TK::Percent";
    elif k == TK::Semicolon then return "TK::Semicolon";
    elif k == TK::Less then return "TK::Less";
    elif k == TK::LessEq then return "TK::LessEq";
    elif k == TK::Greater then return "TK::Greater";
    elif k == TK::GreaterEq then return "TK::GreaterEq";
    elif k == TK::Assign then return "TK::Assign";
    elif k == TK::EqEq then return "TK::EqEq";
    elif k == TK::NotEq then return "TK::NotEq";
    elif k == TK::Tilde then return "TK::Tilde";
    elif k == TK::Comma then return "TK::Comma";
    elif k == TK::LParen then return "TK::LParen";
    elif k == TK::RParen then return "TK::RParen";
    elif k == TK::Bar then return "TK::Bar";
    elif k == TK::Amper then return "TK::Amper";
    elif k == TK::Caret then return "TK::Caret";
    elif k == TK::Ellipsis then return "TK::Ellipsis";
    elif k == TK::KW_global then return "TK::KW_global";
    elif k == TK::KW_break then return "TK::KW_break";
    elif k == TK::KW_continue then return "TK::KW_continue";
    elif k == TK::LShift then return "TK::LShift";
    elif k == TK::RShift then return "TK::RShift";
    elif k == TK::Colon then return "TK::Colon";
    elif k == TK::RightArrow then return "TK::RightArrow";
    elif k == TK::PlusEq then return "TK::PlusEq";
    elif k == TK::MinusEq then return "TK::MinusEq";
    elif k == TK::StarEq then return "TK::StarEq";
    elif k == TK::SlashEq then return "TK::SlashEq";
    elif k == TK::PercentEq then return "TK::PercentEq";
    elif k == TK::LShiftEq then return "TK::LShiftEq";
    elif k == TK::RShiftEq then return "TK::RShiftEq";
    elif k == TK::AmperEq then return "TK::AmperEq";
    elif k == TK::CaretEq then return "TK::CaretEq";
    elif k == TK::BarEq then return "TK::BarEq";
    elif k == TK::LSquare then return "TK::LSquare";
    elif k == TK::RSquare then return "TK::RSquare";
    elif k == TK::KW_cast then return "TK::KW_cast";
    elif k == TK::KW_struct then return "TK::KW_struct";
    elif k == TK::KW_union then return "TK::KW_union";
    elif k == TK::KW_enum then return "TK::KW_enum";
    elif k == TK::KW_inline then return "TK::KW_inline";
    elif k == TK::Dot then return "TK::Dot";
    elif k == TK::KW_assert then return "TK::KW_assert";
    elif k == TK::KW_static_assert then return "TK::KW_static_assert";
    elif k == TK::KW_elif then return "TK::KW_elif";
    elif k == TK::KW__FILE__ then return "TK::KW__FILE__";
    elif k == TK::KW__LINE__ then return "TK::KW__LINE__";
    elif k == TK::KW__sizeof then return "TK::KW__sizeof";
    elif k == TK::KW__offsetof then return "TK::KW__offsetof";
    elif k == TK::ColonColon then return "TK::ColonColon";
    elif k == TK::KW_u! then return "TK::KW_u!";
    elif k == TK::KW_u@ then return "TK::KW_u@";
    else return "TK_OUT_OF_RANGE"; end
end

struct Token in
    kind: TK;
    cstr: cstr;
    value: ptr; // FIXME Union(int, cstr)
    src_loc: SrcLoc&;
end

struct SrcLoc in
    filename: cstr;
    line: int;
end

def make_token kind: TK, cstr: cstr, value: ptr, line: int, filename: cstr -> Token& in
    var self = cast(malloc(__sizeof(Token)), Token&);
    self.kind = kind;
    self.cstr = cstr;
    self.value = value;
    self.src_loc = cast(malloc(__sizeof(SrcLoc)), SrcLoc&);
    self.src_loc.filename = filename;
    self.src_loc.line = line;
    return self;
end

def free_token self: Token& in
    if self then
        free(self.src_loc);
        free(self);
    end
end

def print_token self: Token& in
    var k = self.kind;
    printf("token: %s -> '%s' = ", token_kind_cstr(k), self.cstr);
    var v = self.value;
    if k == TK::Integer then
        printf("%d\n", v);
    elif k == TK::String then
        printf("\"%s\"\n", cast(v, String&).cstr());
    elif k == TK::Char then
        printf("'%c'\n", v);
    else
        printf("%s\n", v);
    end
end

def print_src_loc self: SrcLoc& in
    printf("  File \"%s\", line %d\n", self.filename, self.line);
end

def print_token_loc self: Token& in
    print_src_loc(self.src_loc);
end
