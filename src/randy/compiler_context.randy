
const TCOMPILER_CONTEXT_out_lines     = 0;  // string Vector&
const TCOMPILER_CONTEXT_def_src_name = 8;
const TCOMPILER_CONTEXT_def_name     = 16;
const TCOMPILER_CONTEXT_def_params   = 24;
const TCOMPILER_CONTEXT_def_locals   = 32;
const TCOMPILER_CONTEXT_file_map      = 40; // (cstr, int) : path -> id
const TCOMPILER_CONTEXT_nodebug       = 48; // bool
const sizeof_TCOMPILER_CONTEXT        = 56;

def make_compiler_context debug: bool -> compiler_context in
    var self = malloc(sizeof_TCOMPILER_CONTEXT);
    var lines = Vector[String&]::new(0);
    u64!(self + TCOMPILER_CONTEXT_out_lines, lines);
    u64!(self + TCOMPILER_CONTEXT_def_src_name, NULL);
    u64!(self + TCOMPILER_CONTEXT_def_name, NULL);
    u64!(self + TCOMPILER_CONTEXT_def_params, NULL);
    u64!(self + TCOMPILER_CONTEXT_def_locals, NULL);
    u64!(self + TCOMPILER_CONTEXT_file_map, make_map(0, cstr_eq, cstr_hash));
    u64!(self + TCOMPILER_CONTEXT_nodebug, not debug);
    return cast(self, compiler_context);
end

def compiler_context_file_map self: compiler_context in
    return cast(u64@(self + TCOMPILER_CONTEXT_file_map), map);
end
def compiler_context_lines self: compiler_context in
    return cast(u64@(self + TCOMPILER_CONTEXT_out_lines), Vector[String&]&);
end
def compiler_context_nodebug self: compiler_context in
    return cast(u64@(self + TCOMPILER_CONTEXT_nodebug), bool);
end

def compiler_context_get_file_id self: compiler_context, path: cstr in
    var found = map_find(compiler_context_file_map(self), path);
    return cast(map_pair_val(found), int);
end

def compiler_context_add_file self:compiler_context, path: cstr, id: int in
    map_set(compiler_context_file_map(self), path, id);
end

def cc_print_lines self: compiler_context in
    var lines = u64@(self + TCOMPILER_CONTEXT_out_lines);
    var len = lines.length;
    var i = 0;
    while i < len do
        printf("%s\n", lines.get(i).cstr());
        i += 1;
    end
end

def cc_out self: compiler_context, cstr: cstr in
    var lines = compiler_context_lines(self);
    var string = String::new(128);
    string.append_cstr(cstr);
    lines.push(string);
    //printf("%s\n", cstr);
end

def cc_out_global self: compiler_context, cstr: cstr in
    var str = String::new(128);
    str.append_cstr("    .global ");
    str.append_cstr(cstr);
    cc_out(self, str.cstr());
    str.delete();
end

def cc_out_extern self: compiler_context, cstr: cstr in
    var str = String::new(128);
    str.append_cstr(".extern ");
    str.append_cstr(cstr);
    cc_out(self, str.cstr());
    str.delete();
end

def cc_out_label self: compiler_context, cstr: cstr in
    var str = String::new(128);
    str.append_cstr(cstr);
    str.push(':');
    cc_out(self, str.cstr());
    str.delete();
end

def cc_out_string self: compiler_context, string: String& in
    // strings are represented in the format:
    // .byte NNN, NNN, NNN, 0
    // we can then assume the maximum length the string be is
    //   6 + 5*length + 1
    // where 6 is the ".byte " prefix,
    //       5 is the "NNN, " representing a byte in the string
    //       1 is the final nul-byte
    var str = String::new(6 + 5*string.length + 1);
    str.append_cstr(".byte ");
    var i = 0;
    var len = string.length;
    while i < len do
        str.append_int(string.get(i));
        i += 1;
        if i < len then
            str.append_cstr(", ");
        end
    end
    if len > 0 then
        str.append_cstr(", 0");
    else
        str.append_cstr("0");
    end
    cc_out(self, str.cstr());
    str.delete();
end

def cc_out_src_loc self: compiler_context, src_loc: SrcLoc& in
    if not src_loc then
        return;
    end
    if compiler_context_nodebug(self) then
        return;
    end
    var str = String::new(32);
    var id = compiler_context_get_file_id(self, src_loc.filename);
    str.append_cstr("    .loc ");
    str.append_int(id);
    str.push(' ');
    str.append_int(src_loc.line);
    cc_out(self, str.cstr());
    str.delete();
end

def cc_out_file self: compiler_context, idx: int, filename: cstr in
    var str = String::new(128);
    str.append_cstr("    .file ");
    str.append_int(idx);
    str.append_cstr(" \"");
    str.append_cstr(filename);
    str.push('"');
    cc_out(self, str.cstr());
    str.delete();
end

def cc_out_files irctx: ir_context, cctx: compiler_context in
    var files = ir_files(irctx);
    var i = 0;
    while i < files.length do
        cc_out_file(cctx, i, files.get(i));
        compiler_context_add_file(cctx, files.get(i), i);
        i += 1;
    end
end

def cc_out_instructions irctx: ir_context, cctx: compiler_context in
    var instructions = ir_instructions(irctx);
    var i = 0;
    while i < instructions.length do
        x86_64_emit_instruction(cctx, instructions.get(i));
        i += 1;
    end
end

def cc_out_externs irctx: ir_context, cctx: compiler_context in
    var externs = ir_externs(irctx);
    var cur_extern = map_begin(externs);
    var end_extern = map_end(externs);
    while cur_extern != end_extern do
        cc_out_extern(cctx, map_pair_key(cur_extern));
        cur_extern = map_next(externs, cur_extern);
    end
end

def cc_out_data_section irctx: ir_context, cctx: compiler_context in
    cc_out(cctx, ".data");
    cc_out(cctx, ".align 8");
    cc_out(cctx, "__argc__: .quad 0");
    cc_out(cctx, "__argv__: .quad 0");

    var globals = ir_globals(irctx);
    var i = 0; var len = globals.length;
    var str = String::new(0);
    while i < len do
        str.reset();
        var gi = globals.get(i);
        var kind = global_info_kind(gi);
        var label = global_info_label(gi);
        var value = global_info_value(gi);
        if kind == GIK_String then
            str.append_cstr(label);
            str.append_cstr(": .quad ");
            str.append_cstr(value);
            cc_out(cctx, str.cstr());
        elif kind == GIK_Integer then
            str.append_cstr(label);
            str.append_cstr(": .quad ");
            str.append_int(cast(value, int));
            cc_out(cctx, str.cstr());
        else
            NYI_ERR(__FILE__, __LINE__, "cc_out_data_section: unknown global kind");
        end
        i += 1;
    end

    cc_out(cctx, ".section .rodata, \"a\"");
    var strings = ir_strings(irctx);
    var cur_string = map_begin(strings);
    var end_string = map_end(strings);
    while cur_string != end_string do
        cc_out(cctx, ".align 8");
        cc_out_label(cctx, map_pair_val(cur_string));
        cc_out_string(cctx, map_pair_key(cur_string));
        cur_string = map_next(strings, cur_string);
    end
end

def cc_lines_to_file cctx: compiler_context, path: cstr in
    var fd = open_for_write(path);
    if fd < 0 then
        printf("Open for write failed with (%d), path was: '%s'\n", fd, path);
        return false;
    end
    var i = 0; var j = 0;
    var BUFLEN = 4096;
    var buffer = malloc(BUFLEN);
    var buffer_end = buffer + BUFLEN;
    var p = buffer;

    var lines = compiler_context_lines(cctx);
    var num_lines = lines.length;
    var line; var line_len;
    while i < num_lines do
        line = lines.get(i);
        j = 0; line_len = line.length;
        while j < line_len do
            if p == buffer_end then
                write_file(fd, buffer, BUFLEN);
                p = buffer;
            end
            u8!(p, line.get(j));
            p += 1;
            j += 1;
        end
        if p == buffer_end then
            write_file(fd, buffer, BUFLEN);
            p = buffer;
        end
        u8!(p, '\n');
        p += 1;
        i += 1;
    end
    if p != buffer then
        write_file(fd, buffer, p - buffer);
    end
    close(fd);
    free(buffer);
    return true;
end

def cc_out_start self: compiler_context, main_def: cstr, exit_def: cstr in
    x86_64_emit_start(self, main_def, exit_def);
end
