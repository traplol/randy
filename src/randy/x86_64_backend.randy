const REG_SIZE = 8;
const SYSV_REGISTERS = 6;

def systemv_arg n in
    if n >= SYSV_REGISTERS then return NULL;
    elif n == 0 then return "%rdi";
    elif n == 1 then return "%rsi";
    elif n == 2 then return "%rdx";
    elif n == 3 then return "%rcx";
    elif n == 4 then return "%r8";
    elif n == 5 then return "%r9";
    end
end

def x86_64_emit_get_local cc, ir in
    check_ir_kind(IRK_GetLocal, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    var offs = (ir_instr_n(ir) + 1) * REG_SIZE;
    if g_Experimental then
        offs = (ir_instr_expr_offs(ir) + PTR_BITS) / BYTE_BITS;
    end
    var str = String::new(20);
    str.append_cstr("    movq -");
    str.append_int(offs);
    str.append_cstr("(%rbp), %rax");
    cc_out(cc, str.cstr());
    str.delete();
    cc_out(cc, "    pushq %rax");
end

def x86_64_emit_ref_local cc, ir in
    check_ir_kind(IRK_RefLocal, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    var offs = (ir_instr_n(ir) + 1) * REG_SIZE;
    if g_Experimental then
        offs = (ir_instr_expr_offs(ir) + PTR_BITS) / BYTE_BITS;
    end
    var str = String::new(20);
    str.append_cstr("    leaq -");
    str.append_int(offs);
    str.append_cstr("(%rbp), %rax");
    cc_out(cc, str.cstr());
    str.delete();
    cc_out(cc, "    pushq %rax");
end

def x86_64_emit_push_label cc, ir in
    check_ir_kind(IRK_PushLabel, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    var str = String::new(20);
    str.append_cstr("    leaq ");
    str.append_cstr(ir_instr_label(ir));
    str.append_cstr(", %rax");
    cc_out(cc, str.cstr());
    str.delete();
    cc_out(cc, "    pushq %rax");
end

def x86_64_emit_push_int cc, ir in
    check_ir_kind(IRK_PushInt, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    var str = String::new(20);
    var val = ir_instr_value(ir);
    if (0-2147483649) < val and val < 4294967296 then
        str.append_cstr("    movq $");
    else
        str.append_cstr("    movabsq $");
    end
    str.append_int(val);
    str.append_cstr(", %rax");
    cc_out(cc, str.cstr());
    cc_out(cc, "    pushq %rax");
    str.delete();
end

def x86_64_emit_alloc_temps cc, ir in
    check_ir_kind(IRK_AllocTemps, ir);
    //print_ir(ir);
    var n = ir_instr_n(ir);
    if n > 0 then
        cc_out_src_loc(cc, ir_instr_src_loc(ir));
        var offs = (n+1) * REG_SIZE;
        var str = String::new(20);
        str.append_cstr("    subq $");
        str.append_int(offs);
        str.append_cstr(", %rsp");
        cc_out(cc, str.cstr());
        str.delete();
    end
end

def x86_64_emit_free_temps cc, ir in
    check_ir_kind(IRK_FreeTemps, ir);
    //print_ir(ir);
    var n = ir_instr_n(ir);
    if n > 0 then
        cc_out_src_loc(cc, ir_instr_src_loc(ir));
        var offs = (n+1) * REG_SIZE;
        var str = String::new(20);
        str.append_cstr("    addq $");
        str.append_int(offs);
        str.append_cstr(", %rsp");
        cc_out(cc, str.cstr());
        str.delete();
    end
end

def x86_64_emit_store_temp cc, ir in
    check_ir_kind(IRK_StoreTemp, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    var offs = (ir_instr_n(ir) + 1) * REG_SIZE;
    cc_out(cc, "    popq %rax");
    var str = String::new(20);
    str.append_cstr("    movq %rax, ");
    str.append_int(offs);
    str.append_cstr("(%rsp)");
    cc_out(cc, str.cstr());
    str.delete();
end

def x86_64_emit_set_arg_temp cc, ir in
    check_ir_kind(IRK_SetArgTemp, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    var n = ir_instr_n(ir);
    var offs = (n + 1) * REG_SIZE;
    var str = String::new(20);
    if n < SYSV_REGISTERS then
        str.append_cstr("    movq ");
        str.append_int(offs);
        str.append_cstr("(%rsp), ");
        str.append_cstr(systemv_arg(n));
    else
        str.append_cstr("    pushq ");
        str.append_int(offs);
        str.append_cstr("(%rsp)");
    end
    cc_out(cc, str.cstr());
    str.delete();
end

def x86_64_emit_call cc, ir in
    check_ir_kind(IRK_Call, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));

    if cstr_eq("__builtin_trap", ir_instr_label(ir)) then
        cc_out(cc, "    int3");
        // needed to satisfy the DropTop that gets emitted after this "call"
        cc_out(cc, "    subq $8, %rsp");
        return;
    end

    if ir_instr_varargs(ir) then
        cc_out(cc, "    xor %al, %al");
    end
    var str = String::new(20);
    str.append_cstr("    call ");
    str.append_cstr(ir_instr_label(ir));
    cc_out(cc, str.cstr());
    str.delete();
    cc_out(cc, "    pushq %rax");
end

def x86_64_emit_pop_call cc, ir in
    check_ir_kind(IRK_PopCall, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, "    popq %rcx");
    cc_out(cc, "    xor %al, %al");
    cc_out(cc, "    call *%rcx");
    cc_out(cc, "    pushq %rax");
end

def x86_64_emit_op_add cc, ir in
    check_ir_kind(IRK_OpAdd, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, "    popq %rdx"); // -- b
    cc_out(cc, "    popq %rax"); // -- a
    cc_out(cc, "    addq %rdx, %rax");
    cc_out(cc, "    pushq %rax");
end

def x86_64_emit_op_sub cc, ir in
    check_ir_kind(IRK_OpSub, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, "    popq %rdx"); // -- b
    cc_out(cc, "    popq %rax"); // -- a
    cc_out(cc, "    subq %rdx, %rax");
    cc_out(cc, "    pushq %rax");
end

def x86_64_emit_op_mul cc, ir in
    check_ir_kind(IRK_OpMul, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, "    popq %rdx"); // -- b
    cc_out(cc, "    popq %rax"); // -- a
    cc_out(cc, "    imulq %rdx, %rax");
    cc_out(cc, "    pushq %rax");
end

def x86_64_emit_op_div cc, ir in
    check_ir_kind(IRK_OpDiv, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, "    popq %rcx"); // -- b
    cc_out(cc, "    popq %rax"); // -- a
    cc_out(cc, "    cqto");
    cc_out(cc, "    idivq %rcx");
    cc_out(cc, "    pushq %rax");
end

def x86_64_emit_op_mod cc, ir in
    check_ir_kind(IRK_OpMod, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, "    popq %rcx"); // -- b
    cc_out(cc, "    popq %rax"); // -- a
    cc_out(cc, "    cqto");
    cc_out(cc, "    idivq %rcx");
    cc_out(cc, "    pushq %rdx");
end

def x86_64_emit_op_bit_xor cc, ir in
    check_ir_kind(IRK_OpBitXOR, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, "    popq %rdx"); // -- b
    cc_out(cc, "    popq %rax"); // -- a
    cc_out(cc, "    xorq %rdx, %rax");
    cc_out(cc, "    pushq %rax");
end

def x86_64_emit_op_bit_and cc, ir in
    check_ir_kind(IRK_OpBitAND, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, "    popq %rdx"); // -- b
    cc_out(cc, "    popq %rax"); // -- a
    cc_out(cc, "    andq %rdx, %rax");
    cc_out(cc, "    pushq %rax");
end

def x86_64_emit_op_bit_or cc, ir in
    check_ir_kind(IRK_OpBitOR, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, "    popq %rdx"); // -- b
    cc_out(cc, "    popq %rax"); // -- a
    cc_out(cc, "    orq %rdx, %rax");
    cc_out(cc, "    pushq %rax");
end

def x86_64_emit_op_bit_shift_l cc, ir in
    check_ir_kind(IRK_OpBitShiftL, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, "    popq %rcx"); // -- b
    cc_out(cc, "    popq %rax"); // -- a
    cc_out(cc, "    salq %cl, %rax");
    cc_out(cc, "    pushq %rax");
end

def x86_64_emit_op_bit_shift_r cc, ir in
    check_ir_kind(IRK_OpBitShiftR, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, "    popq %rcx"); // -- b
    cc_out(cc, "    popq %rax"); // -- a
    cc_out(cc, "    sarq %cl, %rax");
    cc_out(cc, "    pushq %rax");
end

def _x86_64_emit_compare cc, op in
    cc_out(cc, "    popq %r10"); // -- a
    cc_out(cc, "    popq %r11"); // -- a
    cc_out(cc, "    xorl %eax, %eax");
    cc_out(cc, "    cmpq %r10, %r11");
    var str = String::new(20);
    str.append_cstr("    ");
    str.append_cstr(op);
    str.append_cstr(" %al");
    cc_out(cc, str.cstr());
    str.delete();
    cc_out(cc, "    pushq %rax");
end

def x86_64_emit_op_eq cc, ir in
    check_ir_kind(IRK_OpEq, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    _x86_64_emit_compare(cc, "sete");
end

def x86_64_emit_op_not_eq cc, ir in
    check_ir_kind(IRK_OpNotEq, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    _x86_64_emit_compare(cc, "setne");
end

def x86_64_emit_op_less cc, ir in
    check_ir_kind(IRK_OpLess, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    _x86_64_emit_compare(cc, "setl");
end

def x86_64_emit_op_less_eq cc, ir in
    check_ir_kind(IRK_OpLessEq, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    _x86_64_emit_compare(cc, "setle");
end

def x86_64_emit_op_greater cc, ir in
    check_ir_kind(IRK_OpGreater, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    _x86_64_emit_compare(cc, "setg");
end

def x86_64_emit_op_greater_eq cc, ir in
    check_ir_kind(IRK_OpGreaterEq, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    _x86_64_emit_compare(cc, "setge");
end

def x86_64_emit_pop_return cc, ir in
    check_ir_kind(IRK_PopReturn, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, "    popq %rax");
    cc_out(cc, "    leave");
    cc_out(cc, "    ret");
end

def x86_64_emit_return_void cc, ir in
    check_ir_kind(IRK_ReturnVoid, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, "    xorq %rax, %rax");
    cc_out(cc, "    leave");
    cc_out(cc, "    ret");
end

def x86_64_emit_set_local cc, ir in
    check_ir_kind(IRK_SetLocal, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, "    popq %rax");
    var str = String::new(20);
    var offs = (ir_instr_n(ir) + 1) * REG_SIZE;
    if g_Experimental then
        offs = (ir_instr_expr_offs(ir) + PTR_BITS) / BYTE_BITS;
    end
    str.append_cstr("    movq %rax, -");
    str.append_int(offs);
    str.append_cstr("(%rbp)");
    cc_out(cc, str.cstr());
    str.delete();
end

def x86_64_emit_new_def cc, ir in
    check_ir_kind(IRK_NewDef, ir);
    //print_ir(ir);
    var label = ir_instr_label(ir);
    cc_out_global(cc, label);
    cc_out(cc, "    .align 16");
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out_label(cc, label);
    cc_out(cc, "    pushq %rbp");
    cc_out(cc, "    movq %rsp, %rbp");
    var n = ir_instr_nlocals(ir) * REG_SIZE;
    if g_Experimental then
        n = ir_instr_expr_size(ir) / BYTE_BITS;
    end
    if n > 0 then
        var str = String::new(20);
        str.append_cstr("    subq $");
        str.append_int(n);
        str.append_cstr(", %rsp");
        cc_out(cc, str.cstr());
        str.delete();
    end
end

def x86_64_emit_set_local_arg cc, ir in
    check_ir_kind(IRK_SetLocalArg, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    var local_n = ir_instr_n(ir);
    var offs = REG_SIZE * (local_n+1);
    if g_Experimental then
        offs = (ir_instr_expr_offs(ir) + PTR_BITS) / BYTE_BITS;
    end
    var arg_n = ir_instr_arg(ir);
    var str = String::new(20);
    if arg_n < SYSV_REGISTERS then
        str.append_cstr("    movq ");
        str.append_cstr(systemv_arg(arg_n));
        str.append_cstr(", -");
        str.append_int(offs);
        str.append_cstr("(%rbp)");
        cc_out(cc, str.cstr());
        str.delete();
    else
        var n = (local_n - SYSV_REGISTERS + 2) * REG_SIZE;
        if g_Experimental then
            assert(false, "todo: ran out of registers\n");
        end
        str.append_cstr("    movq ");
        str.append_int(n);
        str.append_cstr("(%rbp), %rax");
        cc_out(cc, str.cstr());
        str.reset();
        str.append_cstr("    movq %rax, -");
        str.append_int(offs);
        str.append_cstr("(%rbp)");
        cc_out(cc, str.cstr());
        str.delete();
    end
end

def x86_64_emit_close_def cc, ir in
    check_ir_kind(IRK_CloseDef, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, "    movq %rbp, %rsp");
    cc_out(cc, "    popq %rbp");
    cc_out(cc, "    ret");
end

def x86_64_emit_goto_top_false cc, ir in
    check_ir_kind(IRK_GotoTopFalse, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, "    cmpq $0, (%rsp)");
    var str = String::new(20);
    str.append_cstr("    je ");
    str.append_cstr(ir_instr_label(ir));
    cc_out(cc, str.cstr());
    str.delete();
    cc_out(cc, "    addq $8, %rsp");
end

def x86_64_emit_goto_top_true cc, ir in
    check_ir_kind(IRK_GotoTopTrue, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, "    cmpq $0, (%rsp)");
    var str = String::new(20);
    str.append_cstr("    jne ");
    str.append_cstr(ir_instr_label(ir));
    cc_out(cc, str.cstr());
    str.delete();
    cc_out(cc, "    addq $8, %rsp");
end

def x86_64_emit_goto_false cc, ir in
    check_ir_kind(IRK_GotoFalse, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, "    popq %rax");
    cc_out(cc, "    cmpq $0, %rax");
    var str = String::new(20);
    str.append_cstr("    je ");
    str.append_cstr(ir_instr_label(ir));
    cc_out(cc, str.cstr());
    str.delete();
end

def x86_64_emit_goto cc, ir in
    check_ir_kind(IRK_Goto, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    var str = String::new(20);
    str.append_cstr("    jmp ");
    str.append_cstr(ir_instr_label(ir));
    cc_out(cc, str.cstr());
    str.delete();
end

def x86_64_emit_label cc, ir in
    check_ir_kind(IRK_Label, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out_label(cc, ir_instr_label(ir));
end

def x86_64_emit_ptr_read cc, ir in
    check_ir_kind(IRK_PtrRead, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    var size = ir_instr_size(ir);
    cc_out(cc, "    popq %rax");
    cc_out(cc, "    xorl %edx, %edx");
    var str = String::new(20);
    var reg;
    str.append_cstr("    mov");
    if size == 8 then
        str.push('b');
        reg = "%dl";
    elif size == 16 then
        str.push('w');
        reg = "%dx";
    elif size == 32 then
        str.push('l');
        reg = "%edx";
    elif size == 64 then
        str.push('q');
        reg = "%rdx";
    else
        assert(false,
            "x86_64_emit_ptr_read does not work with sizes outside of 8, 16, 32, 64, size is %d\n",
            size);
    end
    str.append_cstr(" (%rax), ");
    str.append_cstr(reg);
    cc_out(cc, str.cstr());
    str.delete();
    cc_out(cc, "    movq %rdx, %rax");
    cc_out(cc, "    pushq %rax");
end

def x86_64_emit_ptr_write cc, ir in
    check_ir_kind(IRK_PtrWrite, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    var size = ir_instr_size(ir);
    cc_out(cc, "    popq %rax"); // -- ptr
    cc_out(cc, "    popq %rdx"); // -- value
    var str = String::new(20);
    var reg;
    str.append_cstr("    mov");
    if size == 8 then
        str.push('b');
        reg = "%dl";
    elif size == 16 then
        str.push('w');
        reg = "%dx";
    elif size == 32 then
        str.push('l');
        reg = "%edx";
    elif size == 64 then
        str.push('q');
        reg = "%rdx";
    else
        assert(false,
            "x86_64_emit_ptr_write does not work with sizes outside of 8, 16, 32, 64, size is %d\n",
            size);
    end
    str.push(' ');
    str.append_cstr(reg);
    str.append_cstr(", (%rax)");
    cc_out(cc, str.cstr());
    str.delete();
end

def x86_64_emit_ptr_copy cc, ir in
    check_ir_kind(IRK_PtrCopy, ir);
    //print_ir(ir);
    var bits = ir_instr_size(ir);
    if bits <= 0 then
        return;
    end
    var size = (bits + 7) / 8; // num of bytes to copy
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, "    popq %rax"); // -- dest
    cc_out(cc, "    popq %rdx"); // -- src

    var sse = size / 16;
    size -= sse * 16;
    var movq = size / 8;
    size -= movq * 8;
    var movl = size / 4;
    size -= movl * 4;
    var movw = size / 2;
    size -= movw * 2;
    var movb = size;
    size -= movb * 1;
    assert(size == 0, "x86_64_emit_ptr_copy: didn't resolve size to 0, it was %d\n", size);

    var i = 0; var offs = 0;
    var str = String::new(20);
    while i < sse do
        // load src+offs into xmm0
        str.reset();
        str.append_cstr("    movdqu ");
        str.append_int(offs);
        str.append_cstr("(%rdx), %xmm0");
        cc_out(cc, str.cstr());

        // store xmm0 into dest+offs
        str.reset();
        str.append_cstr("    movups %xmm0, ");
        str.append_int(offs);
        str.append_cstr("(%rax)");
        cc_out(cc, str.cstr());

        i += 1;
        offs += 16;
    end

    while i < movq do
        // load src+offs into rcx
        str.reset();
        str.append_cstr("    movq ");
        str.append_int(offs);
        str.append_cstr("(%rdx), %rcx");
        cc_out(cc, str.cstr());

        // store rcx into dest+offs
        str.reset();
        str.append_cstr("    movq %rcx, ");
        str.append_int(offs);
        str.append_cstr("(%rax)");
        cc_out(cc, str.cstr());

        i += 1;
        offs += 8;
    end

    i = 0;
    while i < movl do
        // load src+offs into ecx
        str.reset();
        str.append_cstr("    movl ");
        str.append_int(offs);
        str.append_cstr("(%rdx), %ecx");
        cc_out(cc, str.cstr());

        // store ecx into dest+offs
        str.reset();
        str.append_cstr("    movl %ecx, ");
        str.append_int(offs);
        str.append_cstr("(%rax)");
        cc_out(cc, str.cstr());

        i += 1;
        offs += 4;
    end

    i = 0;
    while i < movw do
        // load src+offs into cx
        str.reset();
        str.append_cstr("    movw ");
        str.append_int(offs);
        str.append_cstr("(%rdx), %cx");
        cc_out(cc, str.cstr());

        // store cx into dest+offs
        str.reset();
        str.append_cstr("    movw %cx, ");
        str.append_int(offs);
        str.append_cstr("(%rax)");
        cc_out(cc, str.cstr());

        i += 1;
        offs += 2;
    end

    i = 0;
    while i < movb do
        // load src+offs into ecx
        str.reset();
        str.append_cstr("    movzbl ");
        str.append_int(offs);
        str.append_cstr("(%rdx), %ecx");
        cc_out(cc, str.cstr());

        // store cl into dest+offs
        str.reset();
        str.append_cstr("    movb %cl, ");
        str.append_int(offs);
        str.append_cstr("(%rax)");
        cc_out(cc, str.cstr());

        i += 1;
        offs += 1;
    end
    str.delete();
end

def x86_64_emit_ptr_offset cc, ir in
    check_ir_kind(IRK_PtrOffset, ir);
    //print_ir(ir);
    var offset = ir_instr_offset(ir) / BYTE_BITS;
    if offset == 0 then
        return;
    end
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, "    popq %rax");

    var str = String::new(20);
    str.append_cstr("    leaq ");
    str.append_int(offset);
    str.append_cstr("(%rax), %rax");
    cc_out(cc, str.cstr());
    str.delete();

    cc_out(cc, "    pushq %rax");
end

def x86_64_emit_bit_not cc, ir in
    check_ir_kind(IRK_BitNot, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, "    popq %rax"); // -- a
    cc_out(cc, "    not %rax");
    cc_out(cc, "    pushq %rax");
end

def x86_64_emit_logic_not cc, ir in
    check_ir_kind(IRK_LogicNot, ir);
    //print_ir(ir);
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, "    popq %rax"); // -- a
    cc_out(cc, "    cmpq $0, %rax");
    cc_out(cc, "    sete %al");
    cc_out(cc, "    movzbl %al, %eax");
    cc_out(cc, "    pushq %rax");
end

def x86_64_emit_inline_asm cc, ir in
    check_ir_kind(IRK_InlineAsm, ir);
    cc_out(cc, "    .align 16");
    cc_out_label(cc, ir_instr_name(ir));
    cc_out_src_loc(cc, ir_instr_src_loc(ir));
    cc_out(cc, ir_instr_asm(ir));
end

def x86_64_emit_lazy_ident cc, ir in
    check_ir_kind(IRK_LazyIdent, ir);
    NYI_ERR(__FILE__, __LINE__, "IRK_LazyIdent should have been handled in ir_context.randy");
end

def x86_64_emit_call_lazy_ident cc, ir in
    check_ir_kind(IRK_CallLazyIdent, ir);
    NYI_ERR(__FILE__, __LINE__, "IRK_CallLazyIdent should have been handled in ir_context.randy");
end

def x86_64_emit_drop_top cc, ir in
    check_ir_kind(IRK_DropTop, ir);
    //print_ir(ir);
    cc_out(cc, "    addq $8, %rsp");
end

def x86_64_emit_set_global cc, ir in
    check_ir_kind(IRK_SetGlobal, ir);
    //print_ir(ir);
    cc_out(cc, "    popq %rax");
    var str = String::new(20);
    str.append_cstr("    movq %rax, (");
    str.append_cstr(ir_instr_label(ir));
    str.append_cstr(")");
    cc_out(cc, str.cstr());
    str.delete();
end

def x86_64_emit_get_global cc, ir in
    check_ir_kind(IRK_GetGlobal, ir);
    //print_ir(ir);
    var str = String::new(20);
    str.append_cstr("    movq (");
    str.append_cstr(ir_instr_label(ir));
    str.append_cstr("), %rax");
    cc_out(cc, str.cstr());
    cc_out(cc, "    pushq %rax");
    str.delete();
end

def x86_64_emit_ref_global cc, ir in
    check_ir_kind(IRK_RefGlobal, ir);
    //print_ir(ir);
    var str = String::new(20);
    str.append_cstr("    leaq ");
    str.append_cstr(ir_instr_label(ir));
    str.append_cstr(", %rax");
    cc_out(cc, str.cstr());
    cc_out(cc, "    pushq %rax");
    str.delete();
end

def x86_64_emit_negative cc, ir in
    check_ir_kind(IRK_Negative, ir);
    //print_ir(ir);
    cc_out(cc, "    popq %rax");
    cc_out(cc, "    neg %rax");
    cc_out(cc, "    pushq %rax");
end

def x86_64_emit_instruction cc: compiler_context, ir: ir_instr in
    var k = ir_instr_kind(ir);
    if k == IRK_GetLocal then x86_64_emit_get_local(cc, ir);
    elif k == IRK_PushLabel then x86_64_emit_push_label(cc, ir);
    elif k == IRK_PushInt then x86_64_emit_push_int(cc, ir);
    elif k == IRK_AllocTemps then x86_64_emit_alloc_temps(cc, ir);
    elif k == IRK_FreeTemps then x86_64_emit_free_temps(cc, ir);
    elif k == IRK_StoreTemp then x86_64_emit_store_temp(cc, ir);
    elif k == IRK_SetArgTemp then x86_64_emit_set_arg_temp(cc, ir);
    elif k == IRK_Call then x86_64_emit_call(cc, ir);
    elif k == IRK_PopCall then x86_64_emit_pop_call(cc, ir);
    elif k == IRK_OpAdd then x86_64_emit_op_add(cc, ir);
    elif k == IRK_OpSub then x86_64_emit_op_sub(cc, ir);
    elif k == IRK_OpMul then x86_64_emit_op_mul(cc, ir);
    elif k == IRK_OpDiv then x86_64_emit_op_div(cc, ir);
    elif k == IRK_OpMod then x86_64_emit_op_mod(cc, ir);
    elif k == IRK_OpEq then x86_64_emit_op_eq(cc, ir);
    elif k == IRK_OpNotEq then x86_64_emit_op_not_eq(cc, ir);
    elif k == IRK_OpLess then x86_64_emit_op_less(cc, ir);
    elif k == IRK_OpLessEq then x86_64_emit_op_less_eq(cc, ir);
    elif k == IRK_OpGreater then x86_64_emit_op_greater(cc, ir);
    elif k == IRK_OpGreaterEq then x86_64_emit_op_greater_eq(cc, ir);
    elif k == IRK_PopReturn then x86_64_emit_pop_return(cc, ir);
    elif k == IRK_ReturnVoid then x86_64_emit_return_void(cc, ir);
    elif k == IRK_SetLocal then x86_64_emit_set_local(cc, ir);
    elif k == IRK_NewDef then x86_64_emit_new_def(cc, ir);
    elif k == IRK_SetLocalArg then x86_64_emit_set_local_arg(cc, ir);
    elif k == IRK_CloseDef then x86_64_emit_close_def(cc, ir);
    elif k == IRK_GotoTopFalse then x86_64_emit_goto_top_false(cc, ir);
    elif k == IRK_GotoTopTrue then x86_64_emit_goto_top_true(cc, ir);
    elif k == IRK_GotoFalse then x86_64_emit_goto_false(cc, ir);
    elif k == IRK_Goto then x86_64_emit_goto(cc, ir);
    elif k == IRK_Label then x86_64_emit_label(cc, ir);
    elif k == IRK_PtrRead then x86_64_emit_ptr_read(cc, ir);
    elif k == IRK_PtrWrite then x86_64_emit_ptr_write(cc, ir);
    elif k == IRK_BitNot then x86_64_emit_bit_not(cc, ir);
    elif k == IRK_LogicNot then x86_64_emit_logic_not(cc, ir);
    elif k == IRK_InlineAsm then x86_64_emit_inline_asm(cc, ir);
    elif k == IRK_LazyIdent then x86_64_emit_lazy_ident(cc, ir);
    elif k == IRK_CallLazyIdent then x86_64_emit_call_lazy_ident(cc, ir);
    elif k == IRK_DropTop then x86_64_emit_drop_top(cc, ir);
    elif k == IRK_SetGlobal then x86_64_emit_set_global(cc, ir);
    elif k == IRK_GetGlobal then x86_64_emit_get_global(cc, ir);
    elif k == IRK_Negative then x86_64_emit_negative(cc, ir);
    elif k == IRK_OpBitXOR then x86_64_emit_op_bit_xor(cc, ir);
    elif k == IRK_OpBitAND then x86_64_emit_op_bit_and(cc, ir);
    elif k == IRK_OpBitOR then x86_64_emit_op_bit_or(cc, ir);
    elif k == IRK_OpBitShiftL then x86_64_emit_op_bit_shift_l(cc, ir);
    elif k == IRK_OpBitShiftR then x86_64_emit_op_bit_shift_r(cc, ir);
    elif k == IRK_ScopeOpen then // nothing to do
    elif k == IRK_ScopeClose then // nothing to do
    elif k == IRK_PtrCopy then x86_64_emit_ptr_copy(cc, ir);
    elif k == IRK_PtrOffset then x86_64_emit_ptr_offset(cc, ir);
    elif k == IRK_RefLocal then x86_64_emit_ref_local(cc, ir);
    elif k == IRK_RefGlobal then x86_64_emit_ref_global(cc, ir);
    else
        printf("`x86_64_emit_instruction` in File \"%s\", line %d\n", __FILE__, __LINE__);
        printf("Unhandled IRK: %s (%d)\n", ir_instr_kind_cstr(k), k);
        print_ir(ir);
        exit(1);
    end
end

def x86_64_emit_start cc: compiler_context, main_def: cstr, exit_def: cstr in
    cc_out(cc, "    .global _start");
    cc_out(cc, "    .align 16");
    cc_out(cc, "_start:");
    cc_out(cc, "    movq (%rsp), %rdi");
    cc_out(cc, "    movq %rsp, %rsi");
    cc_out(cc, "    addq $8, %rsi");
    cc_out(cc, "    movq %rdi, (__argc__)");
    cc_out(cc, "    movq %rsi, (__argv__)");
    var str = String::new(0);
    str.append_cstr("    call ");
    str.append_cstr(main_def);
    cc_out(cc, str.cstr());
    cc_out(cc, "    movq %rax, %rdi");
    if exit_def then
        str.reset();
        str.append_cstr("    call ");
        str.append_cstr(exit_def);
        cc_out(cc, str.cstr());
    end
    cc_out(cc, "    movq $60, %rax");
    cc_out(cc, "    syscall");
    cc_out(cc, "    int3");
end
