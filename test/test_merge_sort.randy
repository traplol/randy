#include std/vector

def merge dest, left, right in
    var i = 0;
    var j = 0;
    var k = 0;

    while i < left.length and j < right.length do
        if left.get(i) <= right.get(j) then
            dest.set(k, left.get(i));
            i += 1;
        else
            dest.set(k, right.get(j));
            j += 1;
        end
        k += 1;
    end

    // copy remaining elements from left
    while i < left.length do
        dest.set(k, left.get(i));
        i += 1;
        k += 1;
    end

    // copy remaining elements from right
    while j < right.length do
        dest.set(k, right.get(j));
        j += 1;
        k += 1;
    end
end

def merge_sort arr in
    if arr.length <= 1 then
        return arr;
    end

    var mid = arr.length / 2;
    var left = Vector[int]::new(mid);
    var right = Vector[int]::new(arr.length - mid);

    var i = 0;
    while i < mid do
        left.push(arr.get(i));
        i += 1;
    end

    i = mid;
    while i < arr.length do
        right.push(arr.get(i));
        i += 1;
    end

    var new_left = merge_sort(left);
    var new_right = merge_sort(right);
    merge(arr, new_left, new_right);

    if new_left != left then
        left.delete();
    end
    if new_right != right then
        right.delete();
    end
    new_left.delete();
    new_right.delete();

    return arr;
end

def main in
    var arr = Vector[int]::new(10);
    arr.push(5);
    arr.push(2);
    arr.push(9);
    arr.push(1);
    arr.push(7);
    arr.push(8);
    arr.push(3);
    arr.push(6);
    arr.push(4);
    arr.push(0);

    printf("Unsorted vector:\n");
    var i = 0;
    while i < arr.length do
        printf("%d ", arr.get(i));
        i += 1;
    end
    putchar('\n');

    merge_sort(arr);

    printf("Sorted vector:\n");
    i = 0;
    while i < arr.length do
        printf("%d ", arr.get(i));
        i += 1;
    end
    putchar('\n');

    arr.delete();
    return 0;
end
