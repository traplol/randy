#include std/core
#include std/set
#include std/string

def test msg, cond in
    if cond then
        printf("pass: %s\n", msg);
    else
        printf("fail: %s\n", msg);
    end
end

struct CstrHashCompare in
    def hash cstr: cstr in
        return cstr_hash(cstr);
    end

    def equal a: cstr, b: cstr in
        return cstr_eq(a, b);
    end
end

struct PtrHashCompare in
    def hash ptr: ptr in
        return cast(ptr, int);
    end

    def equal a: ptr, b: ptr in
        return a == b;
    end
end

def test_default_set in
    printf("Testing default set.\n");
    var set = Set[int, PtrHashCompare, PtrHashCompare]::new(0);

    test("empty set length is 0", 0 == set.length);

    set.insert(123);
    test("set length is 1 after adding 123", 1 == set.length);
    set.insert(234);
    test("set length is 2 after adding 234", 2 == set.length);
    set.insert(234);
    test("set length is 2 after adding 234 again", 2 == set.length);

    test("set contains 123", set.contains(123));
    test("set contains 234", set.contains(234));

    printf("forcing set to resize\n");
    var i = 1;
    var cap = set._capacity;
    while i < cap + 1 do
        set.insert(i);
        i += 1;
    end
    test("set length is cap+2", cap + 2 == set.length);
    test("set still contains 234", set.contains(234));
    test("set still contains 123", set.contains(123));

    var len = set.length;
    set.remove(234);
    test("set supports removal", (len - 1) == set.length);
    test("set no longer contains 234", not set.contains(234));

    i = 1;
    while i <= 200000 do
        set.insert(i);
        i += 1;
    end
    test("set length is 200000", 200000 == set.length);
    test("set contains 1000", set.contains(1000));
    test("set contains 65536", set.contains(65536));
    test("set contains 100000", set.contains(100000));
    test("set contains 200000", set.contains(200000));
    test("set does not contain 200001", not set.contains(200001));
    set.delete();
end

def cstr_hash cstr: cstr -> int in
    var hash = 5381;
    var c = cast(u8@(cstr), char);
    while c do
        hash = hash * 33 + c;
        c = cast(u8@(cstr), char);
        cstr += 1;
    end
    return hash;
end

def test_cstr_set in
    printf("Testing set with cstrings.\n");
    var set = Set[cstr, CstrHashCompare, CstrHashCompare]::new(16);

    test("set is empty", 0 == set.length);

    set.insert("hello world");
    test("set length is 1", 1 == set.length);
    test("set contains \"hello world\"", set.contains("hello world"));

    set.insert("hello world");
    test("set length is 1", 1 == set.length);

    set.insert("helloworld");
    test("set length is 2", 2 == set.length);
    test("set contains \"helloworld\"", set.contains("helloworld"));

    set.remove("hello world");
    test("set supports removal", 1 == set.length);
    test("set no longer contains \"hello world\"", not set.contains("hello world"));
    set.delete();
end

def test_template_set in
    var set = Set[cstr, CstrHashCompare, CstrHashCompare]::new(0);
    test("set contains \"asdf\"", false == set.contains("asdf"));
    set.insert("asdf");
    test("set length is 1", 1 == set.length);
    test("set contains \"asdf\"", true == set.contains("asdf"));
    set.insert("asdf");
    test("set length is 1", 1 == set.length);
    test("set contains \"asdf\"", true == set.contains("asdf"));
    set.insert("asdf");
    test("set length is 1", 1 == set.length);
    test("set contains \"asdf\"", true == set.contains("asdf"));

    set.insert("foo");
    test("set length is 2", 2 == set.length);
    test("set contains \"foo\"", true == set.contains("foo"));
    set.insert("bar");
    test("set length is 3", 3 == set.length);
    test("set contains \"bar\"", true == set.contains("bar"));
    set.insert("baz");
    test("set length is 4", 4 == set.length);
    test("set contains \"baz\"", true == set.contains("baz"));
    set.insert("quz");
    test("set length is 5", 5 == set.length);
    test("set contains \"quz\"", true == set.contains("quz"));
    set.insert("qwerty");
    test("set length is 6", 6 == set.length);
    test("set contains \"qwerty\"", true == set.contains("qwerty"));
    set.insert("foo");
    test("set length is 6", 6 == set.length);
    test("set contains \"foo\"", true == set.contains("foo"));
    var iter = set.iter();
    while iter do
        printf("iter ~ %s\n", iter.key());
        iter = iter.next();
    end
    set.delete();
end

def main in
    test_default_set();
    test_cstr_set();
    test_template_set();
    return 0;
end

