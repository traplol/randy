#include std/core
#include std/string

def test msg, cond in
    if cond then
        printf("pass: %s\n", msg);
    else
        printf("fail: %s\n", msg);
    end
end

def test_strings in
    printf("Testing strings.\n");
    var empty = String::new_from_cstr("");
    test("empty len is 0", 0 == empty.length);

    var str = String::new(0);
    test("str len is 0", 0 == str.length);
    test("str cap is 0", 0 == str.capacity);
    str.push('a');
    test("str len is 1", 1 == str.length);
    test("str cap is 1", 1 == str.capacity);

    str.push('b'); str.push('c'); str.push('d');
    test("str len is 4", 4 == str.length);

    var other = String::new(4);
    test("other len is 0", 0 == other.length);
    test("other cap is 4", 4 == other.capacity);

    other.append_string(str);
    test("other len is 4", 4 == other.length);
    test("other cap is 4", 4 == other.capacity);

    test("empty is equal to empty", string_eq(empty, empty));
    test("empty is not equal to str", not string_eq(empty, str));
    test("str is not equal to empty", not string_eq(str, empty));

    test("str is equal to str", string_eq(str, str));
    test("str is equal to other", string_eq(str, other));
    test("other is equal to str", string_eq(other, str));

    other.append_cstr("1234");
    test("appended cstr \"1234\" to other", cstr_eq("abcd1234", other.cstr()));
    test("other new len is 8", 8 == other.length);
end

def test_cstrings in
    printf("Testing cstrings.\n");
    test("cstr_eq(\"\", \"\") is equal", cstr_eq("", ""));
    test("cstr_eq(NULL, NULL) is equal", cstr_eq(NULL, NULL));
    test("cstr_eq(\"\", NULL) is not equal", not cstr_eq("", NULL));
    test("cstr_eq(NULL, \"\") is not equal", not cstr_eq(NULL, ""));
    test("same cstrings are equal", cstr_eq("FOO", "FOO"));
    test("same cstring with different case are not equal", not cstr_eq("FOO", "FOo"));
    test("different cstring are not equal", not cstr_eq("FOO", "BAR"));

    test("cstring \"foo\" length is 3", 3 == cstr_len("foo"));
    test("cstring \"\" length is 0", 0 == cstr_len(""));
end

def test_large_string in
    printf("Testing strings can be large.\n");
    var str = String::new(0);
    var i = 0; var n = 500000000;
    while i < n do
        str.push('a');
        i += 1;
    end
    i = 0;
    while i < n do
        if str.get(i) != 'a' then
            printf("string contents incorrect.\n");
            break;
        end
        i += 1;
    end
    test("string len is correct", n == str.length);
end

def main in
    test_strings();
    test_cstrings();
    test_large_string();
    return 0;
end

