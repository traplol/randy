#include std/queue

def test msg, expect, actual: ptr in
    if expect == actual then
        printf("pass: %s\n", msg);
    else
        printf("fail: %s\n", msg);
        printf("    expected: %d, actual %d\n", expect, actual);
    end
end

def main in
    var q = Queue::new(0);
    test("queue is empty", 0, q.length());
    q.enqueue(123);
    test("queue len is 1", 1, q.length());
    q.enqueue(345);
    test("queue len is 2", 2, q.length());
    test("queue dequeue is 123", 123, q.dequeue());
    test("queue len is 1", 1, q.length());
    test("queue dequeue is 345", 345, q.dequeue());
    test("queue len is 0", 0, q.length());

    q.reset();

    test("queue len is 0", 0, q.length());
    q.enqueue(1);
    q.enqueue(2);
    q.enqueue(3);
    q.enqueue(4);
    test("queue len is 4", 4, q.length());
    q.reset();
    test("queue len is 0", 0, q.length());

    var i = 1;
    while i < 65 do
        q.enqueue(i);
        i += 1;
    end
    test("queue len is 64", 64, q.length());
    test("q.peek is 1", 1, q.peek());

    i = 1;
    while i < 65 do
        test("q.dequeue returns i", i, cast(q.dequeue(), int));
        i += 1;
    end
    test("queue len is 0", 0, q.length());

    test("queue head == tail", q.head, q.tail);
    test("queue properly reset when empty", 0, q.head);
    //q.dequeue(); // test empty queue aborts.
end
